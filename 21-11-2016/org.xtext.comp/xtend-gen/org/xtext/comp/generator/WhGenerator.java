/**
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.comp.wh.Command;
import org.xtext.comp.wh.Commands;
import org.xtext.comp.wh.Definition;
import org.xtext.comp.wh.Input;
import org.xtext.comp.wh.Output;
import org.xtext.comp.wh.Program;
import org.xtext.comp.wh.impl.AffectImpl;
import org.xtext.comp.wh.impl.NopImpl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final int indentAll, final int indentIf) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program prog : _filter) {
      String _name = prog.getName();
      String _plus = (_name + ".wh");
      CharSequence _prettyPrint = this.prettyPrint(prog);
      fsa.generateFile(_plus, _prettyPrint);
    }
  }
  
  public CharSequence prettyPrint(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append(" :");
    _builder.newLineIfNotEmpty();
    Definition _definition = p.getDefinition();
    CharSequence _prettyPrint = this.prettyPrint(_definition);
    _builder.append(_prettyPrint, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence prettyPrint(final Input i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _vars = i.getVars();
      int _size = _vars.size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        {
          EList<String> _vars_1 = i.getVars();
          int _size_1 = _vars_1.size();
          int _minus = (_size_1 - 2);
          IntegerRange _upTo = new IntegerRange(0, _minus);
          for(final Integer v : _upTo) {
            EList<String> _vars_2 = i.getVars();
            String _get = _vars_2.get((v).intValue());
            _builder.append(_get, "");
            _builder.append(", ");
          }
        }
      }
    }
    EList<String> _vars_3 = i.getVars();
    EList<String> _vars_4 = i.getVars();
    int _size_2 = _vars_4.size();
    int _minus_1 = (_size_2 - 1);
    String _get_1 = _vars_3.get(_minus_1);
    _builder.append(_get_1, "");
    return _builder;
  }
  
  public CharSequence prettyPrint(final Output o) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<String> _vars = o.getVars();
      int _size = _vars.size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        {
          EList<String> _vars_1 = o.getVars();
          int _size_1 = _vars_1.size();
          int _minus = (_size_1 - 2);
          IntegerRange _upTo = new IntegerRange(0, _minus);
          for(final Integer v : _upTo) {
            EList<String> _vars_2 = o.getVars();
            String _get = _vars_2.get((v).intValue());
            _builder.append(_get, "");
            _builder.append(", ");
          }
        }
      }
    }
    EList<String> _vars_3 = o.getVars();
    EList<String> _vars_4 = o.getVars();
    int _size_2 = _vars_4.size();
    int _minus_1 = (_size_2 - 1);
    String _get_1 = _vars_3.get(_minus_1);
    _builder.append(_get_1, "");
    return _builder;
  }
  
  public CharSequence prettyPrint(final Definition d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("read ");
    Input _input = d.getInput();
    CharSequence _prettyPrint = this.prettyPrint(_input);
    _builder.append(_prettyPrint, "");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("    ");
    Commands _command = d.getCommand();
    CharSequence _prettyPrint_1 = this.prettyPrint(_command);
    _builder.append(_prettyPrint_1, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    Input _input_1 = d.getInput();
    CharSequence _prettyPrint_2 = this.prettyPrint(_input_1);
    _builder.append(_prettyPrint_2, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence prettyPrint(final NopImpl n) {
    StringConcatenation _builder = new StringConcatenation();
    String _nop = n.getNop();
    _builder.append(_nop, "");
    return _builder;
  }
  
  public CharSequence prettyPrint(final AffectImpl a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("I m an Affect");
    return _builder;
  }
  
  public String prettyPrintJava(final Command c, final boolean isLast) {
    String res = "";
    EObject _cmd = c.getCmd();
    if ((_cmd instanceof NopImpl)) {
      String _res = res;
      EObject _cmd_1 = c.getCmd();
      CharSequence _prettyPrint = this.prettyPrint(((NopImpl) _cmd_1));
      res = (_res + _prettyPrint);
    }
    EObject _cmd_2 = c.getCmd();
    if ((_cmd_2 instanceof AffectImpl)) {
      String _res_1 = res;
      EObject _cmd_3 = c.getCmd();
      CharSequence _prettyPrint_1 = this.prettyPrint(((AffectImpl) _cmd_3));
      res = (_res_1 + _prettyPrint_1);
    }
    if ((!isLast)) {
      String _res_2 = res;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(";");
      res = (_res_2 + _builder);
    }
    return res;
  }
  
  public CharSequence prettyPrint(final Command c, final boolean isLast) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _cmd = c.getCmd();
      if ((_cmd instanceof NopImpl)) {
        _builder.newLineIfNotEmpty();
        EObject _cmd_1 = c.getCmd();
        CharSequence _prettyPrint = this.prettyPrint(((NopImpl) _cmd_1));
        _builder.append(_prettyPrint, "");
        {
          if ((!isLast)) {
            _builder.append(";");
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    {
      EObject _cmd_2 = c.getCmd();
      if ((_cmd_2 instanceof AffectImpl)) {
        EObject _cmd_3 = c.getCmd();
        CharSequence _prettyPrint_1 = this.prettyPrint(((AffectImpl) _cmd_3));
        _builder.append(_prettyPrint_1, "");
        {
          if ((!isLast)) {
            _builder.append(";");
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence prettyPrint(final Commands cmds) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Command> _commands = cmds.getCommands();
      int _size = _commands.size();
      boolean _greaterThan = (_size > 1);
      if (_greaterThan) {
        {
          EList<Command> _commands_1 = cmds.getCommands();
          int _size_1 = _commands_1.size();
          int _minus = (_size_1 - 2);
          IntegerRange _upTo = new IntegerRange(0, _minus);
          for(final Integer c : _upTo) {
            EList<Command> _commands_2 = cmds.getCommands();
            Command _get = _commands_2.get((c).intValue());
            String _prettyPrintJava = this.prettyPrintJava(_get, false);
            _builder.append(_prettyPrintJava, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    EList<Command> _commands_3 = cmds.getCommands();
    EList<Command> _commands_4 = cmds.getCommands();
    int _size_2 = _commands_4.size();
    int _minus_1 = (_size_2 - 1);
    Command _get_1 = _commands_3.get(_minus_1);
    String _prettyPrintJava_1 = this.prettyPrintJava(_get_1, true);
    _builder.append(_prettyPrintJava_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
