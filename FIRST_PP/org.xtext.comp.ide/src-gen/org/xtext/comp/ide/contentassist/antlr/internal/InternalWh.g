/*
 * generated by Xtext 2.10.0
 */
grammar InternalWh;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.comp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.comp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.comp.services.WhGrammarAccess;

}
@parser::members {
	private WhGrammarAccess grammarAccess;

	public void setGrammarAccess(WhGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleWh
entryRuleWh
:
{ before(grammarAccess.getWhRule()); }
	 ruleWh
{ after(grammarAccess.getWhRule()); } 
	 EOF 
;

// Rule Wh
ruleWh 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhAccess().getElementsAssignment()); }
		(rule__Wh__ElementsAssignment)*
		{ after(grammarAccess.getWhAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup()); }
		(rule__Definition__Group__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommands
entryRuleCommands
:
{ before(grammarAccess.getCommandsRule()); }
	 ruleCommands
{ after(grammarAccess.getCommandsRule()); } 
	 EOF 
;

// Rule Commands
ruleCommands 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandsAccess().getGroup()); }
		(rule__Commands__Group__0)
		{ after(grammarAccess.getCommandsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getCmdAssignment()); }
		(rule__Command__CmdAssignment)
		{ after(grammarAccess.getCommandAccess().getCmdAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getProgramAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLCTerminalRuleCall_1()); }
	RULE_LC
	{ after(grammarAccess.getProgramAccess().getLCTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_2()); }
	(rule__Program__NameAssignment_2)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLCTerminalRuleCall_3()); }
	RULE_LC
	{ after(grammarAccess.getProgramAccess().getLCTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getProgramAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__5__Impl
	rule__Program__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLCTerminalRuleCall_5()); }
	RULE_LC
	{ after(grammarAccess.getProgramAccess().getLCTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getDefinitionAssignment_6()); }
	(rule__Program__DefinitionAssignment_6)
	{ after(grammarAccess.getProgramAccess().getDefinitionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
	'read'
	{ after(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_1()); }
	RULE_LC
	{ after(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getInputAssignment_2()); }
	(rule__Definition__InputAssignment_2)
	{ after(grammarAccess.getDefinitionAccess().getInputAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__3__Impl
	rule__Definition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_3()); }
	RULE_LC
	{ after(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__4__Impl
	rule__Definition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__5__Impl
	rule__Definition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_5()); }
	RULE_LC
	{ after(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__6__Impl
	rule__Definition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getCommandAssignment_6()); }
	(rule__Definition__CommandAssignment_6)
	{ after(grammarAccess.getDefinitionAccess().getCommandAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__7__Impl
	rule__Definition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_7()); }
	RULE_LC
	{ after(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__8__Impl
	rule__Definition__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_8()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__9__Impl
	rule__Definition__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_9()); }
	RULE_LC
	{ after(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__10__Impl
	rule__Definition__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getWriteKeyword_10()); }
	'write'
	{ after(grammarAccess.getDefinitionAccess().getWriteKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__11__Impl
	rule__Definition__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_11()); }
	RULE_LC
	{ after(grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getOutputAssignment_12()); }
	(rule__Definition__OutputAssignment_12)
	{ after(grammarAccess.getDefinitionAccess().getOutputAssignment_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__0__Impl
	rule__Commands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandsAssignment_0()); }
	(rule__Commands__CommandsAssignment_0)
	{ after(grammarAccess.getCommandsAccess().getCommandsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getGroup_1()); }
	(rule__Commands__Group_1__0)*
	{ after(grammarAccess.getCommandsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__0__Impl
	rule__Commands__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__1__Impl
	rule__Commands__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getLCTerminalRuleCall_1_1()); }
	RULE_LC
	{ after(grammarAccess.getCommandsAccess().getLCTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandsAssignment_1_2()); }
	(rule__Commands__CommandsAssignment_1_2)
	{ after(grammarAccess.getCommandsAccess().getCommandsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wh__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhAccess().getElementsProgramParserRuleCall_0()); }
		ruleProgram
		{ after(grammarAccess.getWhAccess().getElementsProgramParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__DefinitionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getDefinitionDefinitionParserRuleCall_6_0()); }
		ruleDefinition
		{ after(grammarAccess.getProgramAccess().getDefinitionDefinitionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__InputAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getInputIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionAccess().getInputIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__CommandAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getCommandCommandsParserRuleCall_6_0()); }
		ruleCommands
		{ after(grammarAccess.getDefinitionAccess().getCommandCommandsParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__OutputAssignment_12
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getOutputIDTerminalRuleCall_12_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionAccess().getOutputIDTerminalRuleCall_12_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CommandsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getCommandsCommandParserRuleCall_0_0()); }
		ruleCommand
		{ after(grammarAccess.getCommandsAccess().getCommandsCommandParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__CommandsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandsAccess().getCommandsCommandParserRuleCall_1_2_0()); }
		ruleCommand
		{ after(grammarAccess.getCommandsAccess().getCommandsCommandParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CmdAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getCmdNOPTerminalRuleCall_0()); }
		RULE_NOP
		{ after(grammarAccess.getCommandAccess().getCmdNOPTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NOP : 'nop';

RULE_LC : (' '|'\t'|'\n'|'\r') (' '|'\t'|'\n'|'\r')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
