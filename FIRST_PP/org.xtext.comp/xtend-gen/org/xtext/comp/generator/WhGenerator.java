/**
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.comp.wh.Command;
import org.xtext.comp.wh.Commands;
import org.xtext.comp.wh.Definition;
import org.xtext.comp.wh.Program;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program prog : _filter) {
      String _name = prog.getName();
      String _plus = (_name + ".wh");
      CharSequence _prettyPrint = this.prettyPrint(prog);
      fsa.generateFile(_plus, _prettyPrint);
    }
  }
  
  public CharSequence prettyPrint(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append(" :");
    _builder.newLineIfNotEmpty();
    _builder.append("   ");
    Definition _definition = p.getDefinition();
    CharSequence _prettyPrint = this.prettyPrint(_definition);
    _builder.append(_prettyPrint, "   ");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence prettyPrint(final Definition d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("read ");
    String _input = d.getInput();
    _builder.append(_input, "");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("    ");
    Commands _command = d.getCommand();
    CharSequence _prettyPrint = this.prettyPrint(_command);
    _builder.append(_prettyPrint, "    ");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    String _output = d.getOutput();
    _builder.append(_output, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence prettyPrint(final Commands cmds) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Command> _commands = cmds.getCommands();
      for(final Command c : _commands) {
        CharSequence _prettyPrint = this.prettyPrint(c);
        _builder.append(_prettyPrint, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence prettyPrint(final Command c) {
    StringConcatenation _builder = new StringConcatenation();
    String _cmd = c.getCmd();
    _builder.append(_cmd, "");
    return _builder;
  }
}
