/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Wh");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsProgramParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Wh:
		//	elements+=Program*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Program*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Program
		public RuleCall getElementsProgramParserRuleCall_0() { return cElementsProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cDefinitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefinitionDefinitionParserRuleCall_6_0 = (RuleCall)cDefinitionAssignment_6.eContents().get(0);
		
		//Program:
		//	'function' LC name=ID LC ':' LC definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' LC name=ID LC ':' LC definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5() { return cLCTerminalRuleCall_5; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_6() { return cDefinitionAssignment_6; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_6_0() { return cDefinitionDefinitionParserRuleCall_6_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputIDTerminalRuleCall_2_0 = (RuleCall)cInputAssignment_2.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cCommandAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCommandCommandsParserRuleCall_6_0 = (RuleCall)cCommandAssignment_6.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cPercentSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cWriteKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cLCTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cOutputAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cOutputIDTerminalRuleCall_12_0 = (RuleCall)cOutputAssignment_12.eContents().get(0);
		
		//Definition:
		//	'read' LC input=ID LC '%' LC command=Commands LC '%' LC 'write' LC output=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' LC input=ID LC '%' LC command=Commands LC '%' LC 'write' LC output=ID
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//input=ID
		public Assignment getInputAssignment_2() { return cInputAssignment_2; }
		
		//ID
		public RuleCall getInputIDTerminalRuleCall_2_0() { return cInputIDTerminalRuleCall_2_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5() { return cLCTerminalRuleCall_5; }
		
		//command=Commands
		public Assignment getCommandAssignment_6() { return cCommandAssignment_6; }
		
		//Commands
		public RuleCall getCommandCommandsParserRuleCall_6_0() { return cCommandCommandsParserRuleCall_6_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_7() { return cLCTerminalRuleCall_7; }
		
		//'%'
		public Keyword getPercentSignKeyword_8() { return cPercentSignKeyword_8; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_9() { return cLCTerminalRuleCall_9; }
		
		//'write'
		public Keyword getWriteKeyword_10() { return cWriteKeyword_10; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_11() { return cLCTerminalRuleCall_11; }
		
		//output=ID
		public Assignment getOutputAssignment_12() { return cOutputAssignment_12; }
		
		//ID
		public RuleCall getOutputIDTerminalRuleCall_12_0() { return cOutputIDTerminalRuleCall_12_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_0_0 = (RuleCall)cCommandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cCommandsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_1_2_0 = (RuleCall)cCommandsAssignment_1_2.eContents().get(0);
		
		//Commands:
		//	commands+=Command (';' LC commands+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command (';' LC commands+=Command)*
		public Group getGroup() { return cGroup; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_0() { return cCommandsAssignment_0; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0_0() { return cCommandsCommandParserRuleCall_0_0; }
		
		//(';' LC commands+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_1_2() { return cCommandsAssignment_1_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_2_0() { return cCommandsCommandParserRuleCall_1_2_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Command");
		private final Assignment cCmdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCmdNOPTerminalRuleCall_0 = (RuleCall)cCmdAssignment.eContents().get(0);
		
		//Command:
		//	cmd=NOP;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd=NOP
		public Assignment getCmdAssignment() { return cCmdAssignment; }
		
		//NOP
		public RuleCall getCmdNOPTerminalRuleCall_0() { return cCmdNOPTerminalRuleCall_0; }
	}
	
	
	private final WhElements pWh;
	private final ProgramElements pProgram;
	private final DefinitionElements pDefinition;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final TerminalRule tNOP;
	private final TerminalRule tLC;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWh = new WhElements();
		this.pProgram = new ProgramElements();
		this.pDefinition = new DefinitionElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.tNOP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.NOP");
		this.tLC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.LC");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.comp.Wh".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Wh:
	//	elements+=Program*;
	public WhElements getWhAccess() {
		return pWh;
	}
	
	public ParserRule getWhRule() {
		return getWhAccess().getRule();
	}
	
	//Program:
	//	'function' LC name=ID LC ':' LC definition=Definition;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Definition:
	//	'read' LC input=ID LC '%' LC command=Commands LC '%' LC 'write' LC output=ID;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Commands:
	//	commands+=Command (';' LC commands+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	cmd=NOP;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//terminal NOP:
	//	'nop';
	public TerminalRule getNOPRule() {
		return tNOP;
	}
	
	//terminal LC:
	//	(' ' | '\t' | '\n' | '\r') (' ' | '\t' | '\n' | '\r')*;
	public TerminalRule getLCRule() {
		return tLC;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
