/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator

import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.comp.wh.Affect
import org.xtext.comp.wh.Command
import org.xtext.comp.wh.Commands
import org.xtext.comp.wh.Cons
import org.xtext.comp.wh.Definition
import org.xtext.comp.wh.Expr
import org.xtext.comp.wh.ExprSimple
import org.xtext.comp.wh.Exprs
import org.xtext.comp.wh.Input
import org.xtext.comp.wh.Nop
import org.xtext.comp.wh.Output
import org.xtext.comp.wh.Program
import org.xtext.comp.wh.Vars
import org.xtext.comp.wh.ListExpr
import org.xtext.comp.wh.ExprAnd
import org.xtext.comp.wh.ExprOr
import org.xtext.comp.wh.ExprNot
import org.xtext.comp.wh.ExprEq
import java.util.Map
import java.util.HashMap

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhGenerator extends AbstractGenerator {
	
	var sym_tab = new HashMap();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			
	}
	
	def void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String output, int indentAll, int indentIf) {
	
      	var res = ""
        for (prog : resource.allContents.toIterable.filter(Program)) {
        	res += (prettyPrint(prog) + "\n")
        }
        fsa.generateFile(output, res)
	}
	
	def prettyPrint(Program p) '''
            function «p.name» :
            «p.definition.prettyPrint»
        '''
            
    def printWithDelimiter( List<String> list, String delimiter ) {
    	var res = ""
    	
    	if (list.size > 1) {
    		for ( i: 0..list.size() - 2 ) {
    			res += list.get( i ) + delimiter 
    		}
    	}
    	
    	return res+list.get( list.size -1 )
    }
    
    def prettyPrint( Input i ) {    	
    	return printWithDelimiter( i.vars, ",")
    }
    
    def prettyPrint( Output o ) {    	
    	return printWithDelimiter( o.vars, ",")
    }      
          
    def prettyPrint(Definition d) ''' 
    	read «d.input.prettyPrint»
    	%
    	«d.command.prettyPrint»
    	%
    	write «d.output.prettyPrint»
    '''
    
    def prettyPrint( Nop n ) '''«n.nop»'''
    
    def prettyPrint( Exprs e ) {
		var res = ""
		
		for ( i: 0..e.exprs.size()-1 ) {
			res += e.exprs.get( i ).prettyPrint()
			if( i < e.exprs.size()-1 ) {
				res+= ","
			}
		}
		
		return res
    }
    
    
    
    def prettyPrint( ExprSimple exprSim ) {
    	var res = ""
    	
    	if( exprSim.cons != null) {
    		res += exprSim.cons.prettyPrint
    	}
    	else {
    		res += exprSim.str
    	}
    	
    	return res
    }
    
    def prettyPrint( Expr e ) {
    	var res = "";
    	
    	if( e.expr instanceof ExprSimple) {
    		res += (e.expr as ExprSimple).prettyPrint
    	}
    	else if( e instanceof ExprAnd ) {
    		//println(' And Expr')
    		//res += (e.expr as ExprAnd).prettyPrint
    	} else { // pour le exprAnd car pas catch sinon
    		res += (e.expr as ExprAnd).prettyPrint
    	}
    	
    	return res
    }
    
    def prettyPrint( ExprAnd exprAnd ) {
    	var res = exprAnd.exprOr1.prettyPrint
    	
    	for( e: exprAnd.exprOrX ) { res+= " and " + e.prettyPrint }
    	return res;
    }
    
    def prettyPrint( ExprOr exprOr) {
    	var res = exprOr.exprNot1.prettyPrint
    	for( e: exprOr.exprNotX ) { res+= " or " + e.prettyPrint }
    	return res
    }
    
    def prettyPrint( ExprNot exprnot ) {
    	var res = ""
    	if( exprnot.not != null ) {
    		res += "not"
    	}
    	return res+exprnot.expr.prettyPrint
    }
    
    def prettyPrint( ExprEq eeq ) {
    	var res = ""
    	
    	if( eeq.exprSimp1 != null && eeq.exprSimp2 != null ) {
    		res = (eeq.exprSimp1 as ExprSimple).prettyPrint + "?=" + eeq.exprSimp2.prettyPrint
    	} else if ( eeq.expr != null ) {
    		res = " ("
    			res+= eeq.expr.prettyPrint
    		res += ")"
    	}
    	
    	return res
    }
    
    def prettyPrint( Cons c ) {
    	var res = "(cons "
    	
    	res += c.list.prettyPrint
    	
    	return res + ")"
    }
    
    def prettyPrint( ListExpr le ) {
		var res = ""
		
		for ( i: 0..le.exprs.size()-1 ) {
			res += le.exprs.get( i ).prettyPrint()
			if( i < le.exprs.size()-1 ) {
				res+= " "
			}
		}
		
		return res
    }
    
    def prettyPrint( Vars v ) {
    	return v.vars.printWithDelimiter( "," )
    }
    
    def prettyPrint( Affect a ){
    	return a.vars.prettyPrint + ' := ' +  a.exp.prettyPrint;
    }
        
    def prettyPrint( Command c  )  {
    	var res = ""

    	if( c.cmd instanceof Nop ) {
    		res += (c.cmd as Nop).prettyPrint
    	}else if( c.cmd instanceof Affect ) {
    		res+= (c.cmd as Affect).prettyPrint
    	}

    	return res
    }
    
    def prettyPrint( Commands cmds ) {
    	var res = ""
    	
		for ( i: 0..cmds.commands.size() - 1 ) {
			if( i < cmds.commands.size -1) {
				res += cmds.commands.get( i ).prettyPrint + " ;\n" 
			}else {			
				res+=cmds.commands.get( i ).prettyPrint
			}		
		}
    	
    	return res
    }

//	def prettyPrint( ExprAnd exprAnd ) {
//		for( 0..exprAnd.exprs.size-1 ) {
//			
//		}
//	}
}
