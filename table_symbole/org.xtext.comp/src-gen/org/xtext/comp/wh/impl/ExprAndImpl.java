/**
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.wh.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.comp.wh.ExprAnd;
import org.xtext.comp.wh.ExprOr;
import org.xtext.comp.wh.WhPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr And</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.comp.wh.impl.ExprAndImpl#getExprOr1 <em>Expr Or1</em>}</li>
 *   <li>{@link org.xtext.comp.wh.impl.ExprAndImpl#getExprOrX <em>Expr Or X</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprAndImpl extends MinimalEObjectImpl.Container implements ExprAnd
{
  /**
   * The cached value of the '{@link #getExprOr1() <em>Expr Or1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprOr1()
   * @generated
   * @ordered
   */
  protected ExprOr exprOr1;

  /**
   * The cached value of the '{@link #getExprOrX() <em>Expr Or X</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprOrX()
   * @generated
   * @ordered
   */
  protected EList<ExprOr> exprOrX;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprAndImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhPackage.Literals.EXPR_AND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprOr getExprOr1()
  {
    return exprOr1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprOr1(ExprOr newExprOr1, NotificationChain msgs)
  {
    ExprOr oldExprOr1 = exprOr1;
    exprOr1 = newExprOr1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_AND__EXPR_OR1, oldExprOr1, newExprOr1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprOr1(ExprOr newExprOr1)
  {
    if (newExprOr1 != exprOr1)
    {
      NotificationChain msgs = null;
      if (exprOr1 != null)
        msgs = ((InternalEObject)exprOr1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_AND__EXPR_OR1, null, msgs);
      if (newExprOr1 != null)
        msgs = ((InternalEObject)newExprOr1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_AND__EXPR_OR1, null, msgs);
      msgs = basicSetExprOr1(newExprOr1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_AND__EXPR_OR1, newExprOr1, newExprOr1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExprOr> getExprOrX()
  {
    if (exprOrX == null)
    {
      exprOrX = new EObjectContainmentEList<ExprOr>(ExprOr.class, this, WhPackage.EXPR_AND__EXPR_OR_X);
    }
    return exprOrX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EXPR_OR1:
        return basicSetExprOr1(null, msgs);
      case WhPackage.EXPR_AND__EXPR_OR_X:
        return ((InternalEList<?>)getExprOrX()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EXPR_OR1:
        return getExprOr1();
      case WhPackage.EXPR_AND__EXPR_OR_X:
        return getExprOrX();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EXPR_OR1:
        setExprOr1((ExprOr)newValue);
        return;
      case WhPackage.EXPR_AND__EXPR_OR_X:
        getExprOrX().clear();
        getExprOrX().addAll((Collection<? extends ExprOr>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EXPR_OR1:
        setExprOr1((ExprOr)null);
        return;
      case WhPackage.EXPR_AND__EXPR_OR_X:
        getExprOrX().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_AND__EXPR_OR1:
        return exprOr1 != null;
      case WhPackage.EXPR_AND__EXPR_OR_X:
        return exprOrX != null && !exprOrX.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExprAndImpl
