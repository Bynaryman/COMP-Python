/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameProgrammeParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Model:
		//	name+=Programme;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=Programme
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//Programme
		public RuleCall getNameProgrammeParserRuleCall_0() { return cNameProgrammeParserRuleCall_0; }
	}
	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Programme");
		private final RuleCall cFonctionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Programme:
		//	Fonction*;
		@Override public ParserRule getRule() { return rule; }
		
		//Fonction*
		public RuleCall getFonctionParserRuleCall() { return cFonctionParserRuleCall; }
	}
	public class FonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Fonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cDefinitionParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Fonction:
		//	'function' LC SYMBOL ':' LC Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' LC SYMBOL ':' LC Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2() { return cSYMBOLTerminalRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_4() { return cLCTerminalRuleCall_4; }
		
		//Definition
		public RuleCall getDefinitionParserRuleCall_5() { return cDefinitionParserRuleCall_5; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cInputParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cPercentSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cWriteKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cLCTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cOutputParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//Definition:
		//	'read' LC Input LC '%' LC Commands LC '%' LC 'write' LC Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' LC Input LC '%' LC Commands LC '%' LC 'write' LC Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//Input
		public RuleCall getInputParserRuleCall_2() { return cInputParserRuleCall_2; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5() { return cLCTerminalRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_7() { return cLCTerminalRuleCall_7; }
		
		//'%'
		public Keyword getPercentSignKeyword_8() { return cPercentSignKeyword_8; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_9() { return cLCTerminalRuleCall_9; }
		
		//'write'
		public Keyword getWriteKeyword_10() { return cWriteKeyword_10; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_11() { return cLCTerminalRuleCall_11; }
		
		//Output
		public RuleCall getOutputParserRuleCall_12() { return cOutputParserRuleCall_12; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Input:
		//	VARIABLE (',' LC VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE (',' LC VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }
		
		//(',' LC VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_2() { return cVARIABLETerminalRuleCall_1_2; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Output:
		//	VARIABLE (',' LC VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE (',' LC VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }
		
		//(',' LC VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_2() { return cVARIABLETerminalRuleCall_1_2; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Commands:
		//	Command (';' LC Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Command (';' LC Command)*
		public Group getGroup() { return cGroup; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//(';' LC Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_1() { return cLCTerminalRuleCall_1_1; }
		
		//Command
		public RuleCall getCommandParserRuleCall_1_2() { return cCommandParserRuleCall_1_2; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfelseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForeachParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Command:
		//	=> 'nop' | Vars ':=' Exprs
		//	| While
		//	| Ifelse
		//	| For
		//	| Foreach;
		@Override public ParserRule getRule() { return rule; }
		
		//=> 'nop' | Vars ':=' Exprs | While | Ifelse | For | Foreach
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> 'nop'
		public Keyword getNopKeyword_0() { return cNopKeyword_0; }
		
		//Vars ':=' Exprs
		public Group getGroup_1() { return cGroup_1; }
		
		//Vars
		public RuleCall getVarsParserRuleCall_1_0() { return cVarsParserRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//Exprs
		public RuleCall getExprsParserRuleCall_1_2() { return cExprsParserRuleCall_1_2; }
		
		//While
		public RuleCall getWhileParserRuleCall_2() { return cWhileParserRuleCall_2; }
		
		//Ifelse
		public RuleCall getIfelseParserRuleCall_3() { return cIfelseParserRuleCall_3; }
		
		//For
		public RuleCall getForParserRuleCall_4() { return cForParserRuleCall_4; }
		
		//Foreach
		public RuleCall getForeachParserRuleCall_5() { return cForeachParserRuleCall_5; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//While:
		//	=> 'while' LC Expr LC 'do' LC Commands LC 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//=> 'while' LC Expr LC 'do' LC Commands LC 'od'
		public Group getGroup() { return cGroup; }
		
		//=> 'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5() { return cLCTerminalRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_7() { return cLCTerminalRuleCall_7; }
		
		//'od'
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}
	public class IfelseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Ifelse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cElseKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_8_0_1 = (RuleCall)cGroup_8_0.eContents().get(1);
		private final RuleCall cCommandsParserRuleCall_8_0_2 = (RuleCall)cGroup_8_0.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_8_0_3 = (RuleCall)cGroup_8_0.eContents().get(3);
		private final Keyword cFiKeyword_8_0_4 = (Keyword)cGroup_8_0.eContents().get(4);
		private final Keyword cFiKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//Ifelse:
		//	=> 'if' LC Expr LC 'then' LC Commands LC ('else' LC Commands LC 'fi' | 'fi');
		@Override public ParserRule getRule() { return rule; }
		
		//=> 'if' LC Expr LC 'then' LC Commands LC ('else' LC Commands LC 'fi' | 'fi')
		public Group getGroup() { return cGroup; }
		
		//=> 'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5() { return cLCTerminalRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_7() { return cLCTerminalRuleCall_7; }
		
		//('else' LC Commands LC 'fi' | 'fi')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'else' LC Commands LC 'fi'
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'else'
		public Keyword getElseKeyword_8_0_0() { return cElseKeyword_8_0_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_8_0_1() { return cLCTerminalRuleCall_8_0_1; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_8_0_2() { return cCommandsParserRuleCall_8_0_2; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_8_0_3() { return cLCTerminalRuleCall_8_0_3; }
		
		//'fi'
		public Keyword getFiKeyword_8_0_4() { return cFiKeyword_8_0_4; }
		
		//'fi'
		public Keyword getFiKeyword_8_1() { return cFiKeyword_8_1; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//For:
		//	=> 'for' LC Expr LC 'do' LC Commands LC 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//=> 'for' LC Expr LC 'do' LC Commands LC 'od'
		public Group getGroup() { return cGroup; }
		
		//=> 'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5() { return cLCTerminalRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_7() { return cLCTerminalRuleCall_7; }
		
		//'od'
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cExprParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cDoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cCommandsParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cLCTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cOdKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Foreach:
		//	=> 'foreach' LC Expr LC 'in' LC Expr LC
		//	'do' LC Commands LC 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//=> 'foreach' LC Expr LC 'in' LC Expr LC 'do' LC Commands LC 'od'
		public Group getGroup() { return cGroup; }
		
		//=> 'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1() { return cLCTerminalRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_3() { return cLCTerminalRuleCall_3; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5() { return cLCTerminalRuleCall_5; }
		
		//Expr
		public RuleCall getExprParserRuleCall_6() { return cExprParserRuleCall_6; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_7() { return cLCTerminalRuleCall_7; }
		
		//'do'
		public Keyword getDoKeyword_8() { return cDoKeyword_8; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_9() { return cLCTerminalRuleCall_9; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_10() { return cCommandsParserRuleCall_10; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_11() { return cLCTerminalRuleCall_11; }
		
		//'od'
		public Keyword getOdKeyword_12() { return cOdKeyword_12; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Vars:
		//	VARIABLE (',' VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE (',' VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }
		
		//(',' VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_1() { return cVARIABLETerminalRuleCall_1_1; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Exprs:
		//	Expr (',' Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expr (',' Expr)*
		public Group getGroup() { return cGroup; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }
		
		//(',' Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprAndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expr:
		//	=> ExprSimple
		//	| ExprAnd;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ExprSimple | ExprAnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0() { return cExprSimpleParserRuleCall_0; }
		
		//ExprAnd
		public RuleCall getExprAndParserRuleCall_1() { return cExprAndParserRuleCall_1; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNilKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cConsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cListKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cHdKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final RuleCall cExprParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cTlKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final RuleCall cExprParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//ExprSimple:
		//	'nil' | VARIABLE | SYMBOL | '(' 'cons' LExpr ')' | '(' 'list' LExpr ')' | '(' 'hd' LC Expr ')' | '(' 'tl' LC Expr ')'
		//	| '(' SYMBOL LExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'nil' | VARIABLE | SYMBOL | '(' 'cons' LExpr ')' | '(' 'list' LExpr ')' | '(' 'hd' LC Expr ')' | '(' 'tl' LC Expr ')' |
		//'(' SYMBOL LExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nil'
		public Keyword getNilKeyword_0() { return cNilKeyword_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1() { return cVARIABLETerminalRuleCall_1; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2() { return cSYMBOLTerminalRuleCall_2; }
		
		//'(' 'cons' LExpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//'cons'
		public Keyword getConsKeyword_3_1() { return cConsKeyword_3_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_3_2() { return cLExprParserRuleCall_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' 'list' LExpr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//'list'
		public Keyword getListKeyword_4_1() { return cListKeyword_4_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_4_2() { return cLExprParserRuleCall_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'(' 'hd' LC Expr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//'hd'
		public Keyword getHdKeyword_5_1() { return cHdKeyword_5_1; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_5_2() { return cLCTerminalRuleCall_5_2; }
		
		//Expr
		public RuleCall getExprParserRuleCall_5_3() { return cExprParserRuleCall_5_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//'(' 'tl' LC Expr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//'tl'
		public Keyword getTlKeyword_6_1() { return cTlKeyword_6_1; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_6_2() { return cLCTerminalRuleCall_6_2; }
		
		//Expr
		public RuleCall getExprParserRuleCall_6_3() { return cExprParserRuleCall_6_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//'(' SYMBOL LExpr ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_7_1() { return cSYMBOLTerminalRuleCall_7_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_7_2() { return cLExprParserRuleCall_7_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LExpr:
		//	(LC Expr)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(LC Expr)+
		public Group getGroup() { return cGroup; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_0() { return cLCTerminalRuleCall_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cExprOrParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//ExprAnd:
		//	ExprOr (LC 'and' LC ExprOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprOr (LC 'and' LC ExprOr)*
		public Group getGroup() { return cGroup; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_0() { return cExprOrParserRuleCall_0; }
		
		//(LC 'and' LC ExprOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_0() { return cLCTerminalRuleCall_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_2() { return cLCTerminalRuleCall_1_2; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_1_3() { return cExprOrParserRuleCall_1_3; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cExprNotParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//ExprOr:
		//	ExprNot (LC 'or' LC ExprNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprNot (LC 'or' LC ExprNot)*
		public Group getGroup() { return cGroup; }
		
		//ExprNot
		public RuleCall getExprNotParserRuleCall_0() { return cExprNotParserRuleCall_0; }
		
		//(LC 'or' LC ExprNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_0() { return cLCTerminalRuleCall_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_1_2() { return cLCTerminalRuleCall_1_2; }
		
		//ExprNot
		public RuleCall getExprNotParserRuleCall_1_3() { return cExprNotParserRuleCall_1_3; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExprEqParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExprEqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprNot:
		//	'not' LC ExprEq | ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' LC ExprEq | ExprEq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not' LC ExprEq
		public Group getGroup_0() { return cGroup_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }
		
		//LC
		public RuleCall getLCTerminalRuleCall_0_1() { return cLCTerminalRuleCall_0_1; }
		
		//ExprEq
		public RuleCall getExprEqParserRuleCall_0_2() { return cExprEqParserRuleCall_0_2; }
		
		//ExprEq
		public RuleCall getExprEqParserRuleCall_1() { return cExprEqParserRuleCall_1; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ExprEq:
		//	ExprSimple '=?' ExprSimple | '(' Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSimple '=?' ExprSimple | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprSimple '=?' ExprSimple
		public Group getGroup_0() { return cGroup_0; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_0() { return cExprSimpleParserRuleCall_0_0; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_2() { return cExprSimpleParserRuleCall_0_2; }
		
		//'(' Expr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final ProgrammeElements pProgramme;
	private final FonctionElements pFonction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final WhileElements pWhile;
	private final IfelseElements pIfelse;
	private final ForElements pFor;
	private final ForeachElements pForeach;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final LExprElements pLExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tLC;
	private final TerminalRule tSYMBOL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgramme = new ProgrammeElements();
		this.pFonction = new FonctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pWhile = new WhileElements();
		this.pIfelse = new IfelseElements();
		this.pFor = new ForElements();
		this.pForeach = new ForeachElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pLExpr = new LExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VARIABLE");
		this.tLC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LC");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SYMBOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	name+=Programme;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Programme:
	//	Fonction*;
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}
	
	//Fonction:
	//	'function' LC SYMBOL ':' LC Definition;
	public FonctionElements getFonctionAccess() {
		return pFonction;
	}
	
	public ParserRule getFonctionRule() {
		return getFonctionAccess().getRule();
	}
	
	//Definition:
	//	'read' LC Input LC '%' LC Commands LC '%' LC 'write' LC Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	VARIABLE (',' LC VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	VARIABLE (',' LC VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Commands:
	//	Command (';' LC Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	=> 'nop' | Vars ':=' Exprs
	//	| While
	//	| Ifelse
	//	| For
	//	| Foreach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//While:
	//	=> 'while' LC Expr LC 'do' LC Commands LC 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//Ifelse:
	//	=> 'if' LC Expr LC 'then' LC Commands LC ('else' LC Commands LC 'fi' | 'fi');
	public IfelseElements getIfelseAccess() {
		return pIfelse;
	}
	
	public ParserRule getIfelseRule() {
		return getIfelseAccess().getRule();
	}
	
	//For:
	//	=> 'for' LC Expr LC 'do' LC Commands LC 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//Foreach:
	//	=> 'foreach' LC Expr LC 'in' LC Expr LC
	//	'do' LC Commands LC 'od';
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//Vars:
	//	VARIABLE (',' VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//	Expr (',' Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expr:
	//	=> ExprSimple
	//	| ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprSimple:
	//	'nil' | VARIABLE | SYMBOL | '(' 'cons' LExpr ')' | '(' 'list' LExpr ')' | '(' 'hd' LC Expr ')' | '(' 'tl' LC Expr ')'
	//	| '(' SYMBOL LExpr ')';
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//LExpr:
	//	(LC Expr)+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//ExprAnd:
	//	ExprOr (LC 'and' LC ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//ExprOr:
	//	ExprNot (LC 'or' LC ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//ExprNot:
	//	'not' LC ExprEq | ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//ExprEq:
	//	ExprSimple '=?' ExprSimple | '(' Expr ')';
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//terminal VARIABLE:
	//	'A'..'Z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ('!' | '?')?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal LC:
	//	' ' | '\n' | '\t' | '\r\n';
	public TerminalRule getLCRule() {
		return tLC;
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ('!' | '?')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
