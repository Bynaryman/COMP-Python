/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getNameProgrammeParserRuleCall_0());
			}
			lv_name_0_0=ruleProgramme
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"name",
					lv_name_0_0,
					"org.xtext.example.mydsl.MyDsl.Programme");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleProgramme
entryRuleProgramme returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProgrammeRule()); }
	iv_ruleProgramme=ruleProgramme
	{ $current=$iv_ruleProgramme.current.getText(); }
	EOF;

// Rule Programme
ruleProgramme returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgrammeAccess().getFonctionParserRuleCall());
		}
		this_Fonction_0=ruleFonction
		{
			$current.merge(this_Fonction_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRuleFonction
entryRuleFonction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFonctionRule()); }
	iv_ruleFonction=ruleFonction
	{ $current=$iv_ruleFonction.current.getText(); }
	EOF;

// Rule Fonction
ruleFonction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='function'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFonctionAccess().getFunctionKeyword_0());
		}
		this_LC_1=RULE_LC
		{
			$current.merge(this_LC_1);
		}
		{
			newLeafNode(this_LC_1, grammarAccess.getFonctionAccess().getLCTerminalRuleCall_1());
		}
		this_SYMBOL_2=RULE_SYMBOL
		{
			$current.merge(this_SYMBOL_2);
		}
		{
			newLeafNode(this_SYMBOL_2, grammarAccess.getFonctionAccess().getSYMBOLTerminalRuleCall_2());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFonctionAccess().getColonKeyword_3());
		}
		this_LC_4=RULE_LC
		{
			$current.merge(this_LC_4);
		}
		{
			newLeafNode(this_LC_4, grammarAccess.getFonctionAccess().getLCTerminalRuleCall_4());
		}
		{
			newCompositeNode(grammarAccess.getFonctionAccess().getDefinitionParserRuleCall_5());
		}
		this_Definition_5=ruleDefinition
		{
			$current.merge(this_Definition_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current.getText(); }
	EOF;

// Rule Definition
ruleDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='read'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getReadKeyword_0());
		}
		this_LC_1=RULE_LC
		{
			$current.merge(this_LC_1);
		}
		{
			newLeafNode(this_LC_1, grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getInputParserRuleCall_2());
		}
		this_Input_2=ruleInput
		{
			$current.merge(this_Input_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_3=RULE_LC
		{
			$current.merge(this_LC_3);
		}
		{
			newLeafNode(this_LC_3, grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_3());
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getPercentSignKeyword_4());
		}
		this_LC_5=RULE_LC
		{
			$current.merge(this_LC_5);
		}
		{
			newLeafNode(this_LC_5, grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_5());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getCommandsParserRuleCall_6());
		}
		this_Commands_6=ruleCommands
		{
			$current.merge(this_Commands_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_7=RULE_LC
		{
			$current.merge(this_LC_7);
		}
		{
			newLeafNode(this_LC_7, grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_7());
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getPercentSignKeyword_8());
		}
		this_LC_9=RULE_LC
		{
			$current.merge(this_LC_9);
		}
		{
			newLeafNode(this_LC_9, grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_9());
		}
		kw='write'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getWriteKeyword_10());
		}
		this_LC_11=RULE_LC
		{
			$current.merge(this_LC_11);
		}
		{
			newLeafNode(this_LC_11, grammarAccess.getDefinitionAccess().getLCTerminalRuleCall_11());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getOutputParserRuleCall_12());
		}
		this_Output_12=ruleOutput
		{
			$current.merge(this_Output_12);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current.getText(); }
	EOF;

// Rule Input
ruleInput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VARIABLE_0=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_0);
		}
		{
			newLeafNode(this_VARIABLE_0, grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInputAccess().getCommaKeyword_1_0());
			}
			this_LC_2=RULE_LC
			{
				$current.merge(this_LC_2);
			}
			{
				newLeafNode(this_LC_2, grammarAccess.getInputAccess().getLCTerminalRuleCall_1_1());
			}
			this_VARIABLE_3=RULE_VARIABLE
			{
				$current.merge(this_VARIABLE_3);
			}
			{
				newLeafNode(this_VARIABLE_3, grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_1_2());
			}
		)*
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current.getText(); }
	EOF;

// Rule Output
ruleOutput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VARIABLE_0=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_0);
		}
		{
			newLeafNode(this_VARIABLE_0, grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOutputAccess().getCommaKeyword_1_0());
			}
			this_LC_2=RULE_LC
			{
				$current.merge(this_LC_2);
			}
			{
				newLeafNode(this_LC_2, grammarAccess.getOutputAccess().getLCTerminalRuleCall_1_1());
			}
			this_VARIABLE_3=RULE_VARIABLE
			{
				$current.merge(this_VARIABLE_3);
			}
			{
				newLeafNode(this_VARIABLE_3, grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_1_2());
			}
		)*
	)
;

// Entry rule entryRuleCommands
entryRuleCommands returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandsRule()); }
	iv_ruleCommands=ruleCommands
	{ $current=$iv_ruleCommands.current.getText(); }
	EOF;

// Rule Commands
ruleCommands returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current.merge(this_Command_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0());
			}
			this_LC_2=RULE_LC
			{
				$current.merge(this_LC_2);
			}
			{
				newLeafNode(this_LC_2, grammarAccess.getCommandsAccess().getLCTerminalRuleCall_1_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandsAccess().getCommandParserRuleCall_1_2());
			}
			this_Command_3=ruleCommand
			{
				$current.merge(this_Command_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current.getText(); }
	EOF;

// Rule Command
ruleCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			('nop')=>
			kw='nop'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getNopKeyword_0());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getVarsParserRuleCall_1_0());
			}
			this_Vars_1=ruleVars
			{
				$current.merge(this_Vars_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getColonEqualsSignKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprsParserRuleCall_1_2());
			}
			this_Exprs_3=ruleExprs
			{
				$current.merge(this_Exprs_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			('while')=>
			{
				newCompositeNode(grammarAccess.getCommandAccess().getWhileParserRuleCall_2());
			}
			this_While_4=ruleWhile
			{
				$current.merge(this_While_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			('if')=>
			{
				newCompositeNode(grammarAccess.getCommandAccess().getIfelseParserRuleCall_3());
			}
			this_Ifelse_5=ruleIfelse
			{
				$current.merge(this_Ifelse_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			('for')=>
			{
				newCompositeNode(grammarAccess.getCommandAccess().getForParserRuleCall_4());
			}
			this_For_6=ruleFor
			{
				$current.merge(this_For_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			('foreach')=>
			{
				newCompositeNode(grammarAccess.getCommandAccess().getForeachParserRuleCall_5());
			}
			this_Foreach_7=ruleForeach
			{
				$current.merge(this_Foreach_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current.getText(); }
	EOF;

// Rule While
ruleWhile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			('while')=>
			kw='while'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getWhileAccess().getWhileKeyword_0());
			}
		)
		this_LC_1=RULE_LC
		{
			$current.merge(this_LC_1);
		}
		{
			newLeafNode(this_LC_1, grammarAccess.getWhileAccess().getLCTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getWhileAccess().getExprParserRuleCall_2());
		}
		this_Expr_2=ruleExpr
		{
			$current.merge(this_Expr_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_3=RULE_LC
		{
			$current.merge(this_LC_3);
		}
		{
			newLeafNode(this_LC_3, grammarAccess.getWhileAccess().getLCTerminalRuleCall_3());
		}
		kw='do'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWhileAccess().getDoKeyword_4());
		}
		this_LC_5=RULE_LC
		{
			$current.merge(this_LC_5);
		}
		{
			newLeafNode(this_LC_5, grammarAccess.getWhileAccess().getLCTerminalRuleCall_5());
		}
		{
			newCompositeNode(grammarAccess.getWhileAccess().getCommandsParserRuleCall_6());
		}
		this_Commands_6=ruleCommands
		{
			$current.merge(this_Commands_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_7=RULE_LC
		{
			$current.merge(this_LC_7);
		}
		{
			newLeafNode(this_LC_7, grammarAccess.getWhileAccess().getLCTerminalRuleCall_7());
		}
		kw='od'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getWhileAccess().getOdKeyword_8());
		}
	)
;

// Entry rule entryRuleIfelse
entryRuleIfelse returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIfelseRule()); }
	iv_ruleIfelse=ruleIfelse
	{ $current=$iv_ruleIfelse.current.getText(); }
	EOF;

// Rule Ifelse
ruleIfelse returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			('if')=>
			kw='if'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfelseAccess().getIfKeyword_0());
			}
		)
		this_LC_1=RULE_LC
		{
			$current.merge(this_LC_1);
		}
		{
			newLeafNode(this_LC_1, grammarAccess.getIfelseAccess().getLCTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getIfelseAccess().getExprParserRuleCall_2());
		}
		this_Expr_2=ruleExpr
		{
			$current.merge(this_Expr_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_3=RULE_LC
		{
			$current.merge(this_LC_3);
		}
		{
			newLeafNode(this_LC_3, grammarAccess.getIfelseAccess().getLCTerminalRuleCall_3());
		}
		kw='then'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIfelseAccess().getThenKeyword_4());
		}
		this_LC_5=RULE_LC
		{
			$current.merge(this_LC_5);
		}
		{
			newLeafNode(this_LC_5, grammarAccess.getIfelseAccess().getLCTerminalRuleCall_5());
		}
		{
			newCompositeNode(grammarAccess.getIfelseAccess().getCommandsParserRuleCall_6());
		}
		this_Commands_6=ruleCommands
		{
			$current.merge(this_Commands_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_7=RULE_LC
		{
			$current.merge(this_LC_7);
		}
		{
			newLeafNode(this_LC_7, grammarAccess.getIfelseAccess().getLCTerminalRuleCall_7());
		}
		(
			(
				kw='else'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIfelseAccess().getElseKeyword_8_0_0());
				}
				this_LC_9=RULE_LC
				{
					$current.merge(this_LC_9);
				}
				{
					newLeafNode(this_LC_9, grammarAccess.getIfelseAccess().getLCTerminalRuleCall_8_0_1());
				}
				{
					newCompositeNode(grammarAccess.getIfelseAccess().getCommandsParserRuleCall_8_0_2());
				}
				this_Commands_10=ruleCommands
				{
					$current.merge(this_Commands_10);
				}
				{
					afterParserOrEnumRuleCall();
				}
				this_LC_11=RULE_LC
				{
					$current.merge(this_LC_11);
				}
				{
					newLeafNode(this_LC_11, grammarAccess.getIfelseAccess().getLCTerminalRuleCall_8_0_3());
				}
				kw='fi'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIfelseAccess().getFiKeyword_8_0_4());
				}
			)
			    |
			kw='fi'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfelseAccess().getFiKeyword_8_1());
			}
		)
	)
;

// Entry rule entryRuleFor
entryRuleFor returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForRule()); }
	iv_ruleFor=ruleFor
	{ $current=$iv_ruleFor.current.getText(); }
	EOF;

// Rule For
ruleFor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			('for')=>
			kw='for'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getForAccess().getForKeyword_0());
			}
		)
		this_LC_1=RULE_LC
		{
			$current.merge(this_LC_1);
		}
		{
			newLeafNode(this_LC_1, grammarAccess.getForAccess().getLCTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getForAccess().getExprParserRuleCall_2());
		}
		this_Expr_2=ruleExpr
		{
			$current.merge(this_Expr_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_3=RULE_LC
		{
			$current.merge(this_LC_3);
		}
		{
			newLeafNode(this_LC_3, grammarAccess.getForAccess().getLCTerminalRuleCall_3());
		}
		kw='do'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForAccess().getDoKeyword_4());
		}
		this_LC_5=RULE_LC
		{
			$current.merge(this_LC_5);
		}
		{
			newLeafNode(this_LC_5, grammarAccess.getForAccess().getLCTerminalRuleCall_5());
		}
		{
			newCompositeNode(grammarAccess.getForAccess().getCommandsParserRuleCall_6());
		}
		this_Commands_6=ruleCommands
		{
			$current.merge(this_Commands_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_7=RULE_LC
		{
			$current.merge(this_LC_7);
		}
		{
			newLeafNode(this_LC_7, grammarAccess.getForAccess().getLCTerminalRuleCall_7());
		}
		kw='od'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForAccess().getOdKeyword_8());
		}
	)
;

// Entry rule entryRuleForeach
entryRuleForeach returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForeachRule()); }
	iv_ruleForeach=ruleForeach
	{ $current=$iv_ruleForeach.current.getText(); }
	EOF;

// Rule Foreach
ruleForeach returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			('foreach')=>
			kw='foreach'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getForeachAccess().getForeachKeyword_0());
			}
		)
		this_LC_1=RULE_LC
		{
			$current.merge(this_LC_1);
		}
		{
			newLeafNode(this_LC_1, grammarAccess.getForeachAccess().getLCTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getForeachAccess().getExprParserRuleCall_2());
		}
		this_Expr_2=ruleExpr
		{
			$current.merge(this_Expr_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_3=RULE_LC
		{
			$current.merge(this_LC_3);
		}
		{
			newLeafNode(this_LC_3, grammarAccess.getForeachAccess().getLCTerminalRuleCall_3());
		}
		kw='in'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForeachAccess().getInKeyword_4());
		}
		this_LC_5=RULE_LC
		{
			$current.merge(this_LC_5);
		}
		{
			newLeafNode(this_LC_5, grammarAccess.getForeachAccess().getLCTerminalRuleCall_5());
		}
		{
			newCompositeNode(grammarAccess.getForeachAccess().getExprParserRuleCall_6());
		}
		this_Expr_6=ruleExpr
		{
			$current.merge(this_Expr_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_7=RULE_LC
		{
			$current.merge(this_LC_7);
		}
		{
			newLeafNode(this_LC_7, grammarAccess.getForeachAccess().getLCTerminalRuleCall_7());
		}
		kw='do'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForeachAccess().getDoKeyword_8());
		}
		this_LC_9=RULE_LC
		{
			$current.merge(this_LC_9);
		}
		{
			newLeafNode(this_LC_9, grammarAccess.getForeachAccess().getLCTerminalRuleCall_9());
		}
		{
			newCompositeNode(grammarAccess.getForeachAccess().getCommandsParserRuleCall_10());
		}
		this_Commands_10=ruleCommands
		{
			$current.merge(this_Commands_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_LC_11=RULE_LC
		{
			$current.merge(this_LC_11);
		}
		{
			newLeafNode(this_LC_11, grammarAccess.getForeachAccess().getLCTerminalRuleCall_11());
		}
		kw='od'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForeachAccess().getOdKeyword_12());
		}
	)
;

// Entry rule entryRuleVars
entryRuleVars returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	iv_ruleVars=ruleVars
	{ $current=$iv_ruleVars.current.getText(); }
	EOF;

// Rule Vars
ruleVars returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VARIABLE_0=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_0);
		}
		{
			newLeafNode(this_VARIABLE_0, grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVarsAccess().getCommaKeyword_1_0());
			}
			this_VARIABLE_2=RULE_VARIABLE
			{
				$current.merge(this_VARIABLE_2);
			}
			{
				newLeafNode(this_VARIABLE_2, grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleExprs
entryRuleExprs returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	iv_ruleExprs=ruleExprs
	{ $current=$iv_ruleExprs.current.getText(); }
	EOF;

// Rule Exprs
ruleExprs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprsAccess().getExprParserRuleCall_0());
		}
		this_Expr_0=ruleExpr
		{
			$current.merge(this_Expr_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprsAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExprsAccess().getExprParserRuleCall_1_1());
			}
			this_Expr_2=ruleExpr
			{
				$current.merge(this_Expr_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current.getText(); }
	EOF;

// Rule Expr
ruleExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleExprSimple)=>
			{
				newCompositeNode(grammarAccess.getExprAccess().getExprSimpleParserRuleCall_0());
			}
			this_ExprSimple_0=ruleExprSimple
			{
				$current.merge(this_ExprSimple_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprAccess().getExprAndParserRuleCall_1());
		}
		this_ExprAnd_1=ruleExprAnd
		{
			$current.merge(this_ExprAnd_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); }
	iv_ruleExprSimple=ruleExprSimple
	{ $current=$iv_ruleExprSimple.current.getText(); }
	EOF;

// Rule ExprSimple
ruleExprSimple returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='nil'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprSimpleAccess().getNilKeyword_0());
		}
		    |
		this_VARIABLE_1=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_1);
		}
		{
			newLeafNode(this_VARIABLE_1, grammarAccess.getExprSimpleAccess().getVARIABLETerminalRuleCall_1());
		}
		    |
		this_SYMBOL_2=RULE_SYMBOL
		{
			$current.merge(this_SYMBOL_2);
		}
		{
			newLeafNode(this_SYMBOL_2, grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_2());
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0());
			}
			kw='cons'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getConsKeyword_3_1());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_3_2());
			}
			this_LExpr_5=ruleLExpr
			{
				$current.merge(this_LExpr_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0());
			}
			kw='list'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getListKeyword_4_1());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_4_2());
			}
			this_LExpr_9=ruleLExpr
			{
				$current.merge(this_LExpr_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0());
			}
			kw='hd'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getHdKeyword_5_1());
			}
			this_LC_13=RULE_LC
			{
				$current.merge(this_LC_13);
			}
			{
				newLeafNode(this_LC_13, grammarAccess.getExprSimpleAccess().getLCTerminalRuleCall_5_2());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_5_3());
			}
			this_Expr_14=ruleExpr
			{
				$current.merge(this_Expr_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_4());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_6_0());
			}
			kw='tl'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getTlKeyword_6_1());
			}
			this_LC_18=RULE_LC
			{
				$current.merge(this_LC_18);
			}
			{
				newLeafNode(this_LC_18, grammarAccess.getExprSimpleAccess().getLCTerminalRuleCall_6_2());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_6_3());
			}
			this_Expr_19=ruleExpr
			{
				$current.merge(this_Expr_19);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_6_4());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_7_0());
			}
			this_SYMBOL_22=RULE_SYMBOL
			{
				$current.merge(this_SYMBOL_22);
			}
			{
				newLeafNode(this_SYMBOL_22, grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_7_1());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_7_2());
			}
			this_LExpr_23=ruleLExpr
			{
				$current.merge(this_LExpr_23);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_7_3());
			}
		)
	)
;

// Entry rule entryRuleLExpr
entryRuleLExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLExprRule()); }
	iv_ruleLExpr=ruleLExpr
	{ $current=$iv_ruleLExpr.current.getText(); }
	EOF;

// Rule LExpr
ruleLExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_LC_0=RULE_LC
		{
			$current.merge(this_LC_0);
		}
		{
			newLeafNode(this_LC_0, grammarAccess.getLExprAccess().getLCTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getLExprAccess().getExprParserRuleCall_1());
		}
		this_Expr_1=ruleExpr
		{
			$current.merge(this_Expr_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprAndRule()); }
	iv_ruleExprAnd=ruleExprAnd
	{ $current=$iv_ruleExprAnd.current.getText(); }
	EOF;

// Rule ExprAnd
ruleExprAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_0());
		}
		this_ExprOr_0=ruleExprOr
		{
			$current.merge(this_ExprOr_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			this_LC_1=RULE_LC
			{
				$current.merge(this_LC_1);
			}
			{
				newLeafNode(this_LC_1, grammarAccess.getExprAndAccess().getLCTerminalRuleCall_1_0());
			}
			kw='and'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprAndAccess().getAndKeyword_1_1());
			}
			this_LC_3=RULE_LC
			{
				$current.merge(this_LC_3);
			}
			{
				newLeafNode(this_LC_3, grammarAccess.getExprAndAccess().getLCTerminalRuleCall_1_2());
			}
			{
				newCompositeNode(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_1_3());
			}
			this_ExprOr_4=ruleExprOr
			{
				$current.merge(this_ExprOr_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleExprOr
entryRuleExprOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprOrRule()); }
	iv_ruleExprOr=ruleExprOr
	{ $current=$iv_ruleExprOr.current.getText(); }
	EOF;

// Rule ExprOr
ruleExprOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_0());
		}
		this_ExprNot_0=ruleExprNot
		{
			$current.merge(this_ExprNot_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			this_LC_1=RULE_LC
			{
				$current.merge(this_LC_1);
			}
			{
				newLeafNode(this_LC_1, grammarAccess.getExprOrAccess().getLCTerminalRuleCall_1_0());
			}
			kw='or'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprOrAccess().getOrKeyword_1_1());
			}
			this_LC_3=RULE_LC
			{
				$current.merge(this_LC_3);
			}
			{
				newLeafNode(this_LC_3, grammarAccess.getExprOrAccess().getLCTerminalRuleCall_1_2());
			}
			{
				newCompositeNode(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_1_3());
			}
			this_ExprNot_4=ruleExprNot
			{
				$current.merge(this_ExprNot_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleExprNot
entryRuleExprNot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprNotRule()); }
	iv_ruleExprNot=ruleExprNot
	{ $current=$iv_ruleExprNot.current.getText(); }
	EOF;

// Rule ExprNot
ruleExprNot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprNotAccess().getNotKeyword_0_0());
			}
			this_LC_1=RULE_LC
			{
				$current.merge(this_LC_1);
			}
			{
				newLeafNode(this_LC_1, grammarAccess.getExprNotAccess().getLCTerminalRuleCall_0_1());
			}
			{
				newCompositeNode(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_0_2());
			}
			this_ExprEq_2=ruleExprEq
			{
				$current.merge(this_ExprEq_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_1());
		}
		this_ExprEq_3=ruleExprEq
		{
			$current.merge(this_ExprEq_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprEq
entryRuleExprEq returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprEqRule()); }
	iv_ruleExprEq=ruleExprEq
	{ $current=$iv_ruleExprEq.current.getText(); }
	EOF;

// Rule ExprEq
ruleExprEq returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_0());
			}
			this_ExprSimple_0=ruleExprSimple
			{
				$current.merge(this_ExprSimple_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='=?'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_2());
			}
			this_ExprSimple_2=ruleExprSimple
			{
				$current.merge(this_ExprSimple_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExprEqAccess().getExprParserRuleCall_1_1());
			}
			this_Expr_4=ruleExpr
			{
				$current.merge(this_Expr_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

RULE_VARIABLE : 'A'..'Z' ('A'..'Z'|'a'..'z'|'0'..'9')* ('!'|'?')?;

RULE_LC : (' '|'\n'|'\t'|'\r\n');

RULE_SYMBOL : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9')* ('!'|'?')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
