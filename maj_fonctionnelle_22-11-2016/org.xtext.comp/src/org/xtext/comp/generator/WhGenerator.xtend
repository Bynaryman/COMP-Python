/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator

import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.comp.wh.Affect
import org.xtext.comp.wh.Command
import org.xtext.comp.wh.Commands
import org.xtext.comp.wh.Cons
import org.xtext.comp.wh.Definition
import org.xtext.comp.wh.Expr
import org.xtext.comp.wh.ExprAnd
import org.xtext.comp.wh.ExprEq
import org.xtext.comp.wh.ExprNot
import org.xtext.comp.wh.ExprOr
import org.xtext.comp.wh.ExprSimple
import org.xtext.comp.wh.Exprs
import org.xtext.comp.wh.Input
import org.xtext.comp.wh.ListExpr
import org.xtext.comp.wh.Nop
import org.xtext.comp.wh.Output
import org.xtext.comp.wh.Program
import org.xtext.comp.wh.Vars
import org.xtext.comp.wh.If
import java.util.HashMap
import org.xtext.comp.wh.For
import org.xtext.comp.wh.While
import org.xtext.comp.wh.Foreach

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WhGenerator extends AbstractGenerator {

	HashMap<String, Integer> indentMap = new HashMap<String, Integer>();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
			
	}
	
	def void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context, String output, HashMap<String, Integer> indent) {
		indentMap = indent;
		var res = ""
        for (prog : resource.allContents.toIterable.filter(Program)) {
        	res += (prettyPrint(prog))
        }
        fsa.generateFile(output, res)
	}
	
	def prettyPrint(Program p) {
		var res = "function " + p.name + " :\n"
		return res + p.definition.prettyPrint
	}
            
    def printWithDelimiter( List<String> list, String delimiter ) {
    	var res = ""
    	
    	if (list.size > 1) {
    		for ( i: 0..list.size() - 2 ) {
    			res += list.get( i ) + delimiter 
    		}
    	}
    	
    	return res+list.get( list.size -1 )
    }
    
    def prettyPrint( Input i ) {    	
    	return printWithDelimiter( i.vars, ", ")
    }
    
    def prettyPrint( Output o ) {    	
    	return printWithDelimiter( o.vars, ", ")
    }      
          
    def prettyPrint(Definition d) {
    	var res = "read " + d.input.prettyPrint + "\n"
    	res+="%\n"
    	res += d.command.prettyPrint(indentMap.get("all")) + "\n"
    	res +="%\n"
    	res += "write " + d.output.prettyPrint
    	return res
    }
    
    def prettyPrint( Nop n ) '''«n.nop»'''
    
    def prettyPrint( Exprs e ) {
		var res = ""
		
		for ( i: 0..e.exprs.size()-1 ) {
			res += e.exprs.get( i ).prettyPrint()
			if( i < e.exprs.size()-1 ) {
				res+= ", "
			}
		}
		
		return res
    }
    
    
    
    def prettyPrint( ExprSimple exprSim ) {
    	var res = ""
    	
    	if( exprSim.cons != null) {
    		res += exprSim.cons.prettyPrint
    	    		
    	} else if (exprSim.strSymb != null && exprSim.listExpr != null  ) {
    		res += '(' + exprSim.strSymb + ' ' + exprSim.listExpr.prettyPrint + ')'
    	} else if (exprSim.listExpr != null ) {
    		res += '(' + exprSim.listExpr.prettyPrint + ')'
    	} else if (exprSim.exprHd != null ) {
    		res += '(hd ' + exprSim.exprHd.prettyPrint + ')'
    	} else if (exprSim.exprTl != null ) {
    		res += '(tl ' + exprSim.exprTl.prettyPrint + ')'
    	} else {
    		res += exprSim.str
    	}
    	
    	return res
    }
    
    def prettyPrint( Expr e ) {
    	var res = "";
    	
    	if( e.expr instanceof ExprSimple) {
    		res += (e.expr as ExprSimple).prettyPrint
    	}
    	else if( e instanceof ExprAnd ) {
    		//println(' And Expr')
    		//res += (e.expr as ExprAnd).prettyPrint
    	} else { // pour le exprAnd car pas catch sinon
    		res += (e.expr as ExprAnd).prettyPrint
    	}
    	
    	return res
    }
    
    def prettyPrint( ExprAnd exprAnd ) {
    	var res = buildString( exprAnd.exprOrX.size, "(" );
    	
    	res += exprAnd.exprOr1.prettyPrint
    	
    	for( e: exprAnd.exprOrX ) { res+= " and " + e.prettyPrint + ")" }
    	
    	return res;
    }
    
    def prettyPrint( ExprOr exprOr) {
    	var res = buildString( exprOr.exprNotX.size, "(" );
    	res += exprOr.exprNot1.prettyPrint
    	for( e: exprOr.exprNotX ) { res+= " or " + e.prettyPrint + ")" }
    	return res
    }
    
    def prettyPrint( ExprNot exprnot ) {
    	var res = ""
    	var fin = ""
    	if( exprnot.not != null ) {
    		res += "(not "
    		fin = ")"
    	}
    	return res+exprnot.expr.prettyPrint+fin
    }
    
    def prettyPrint( ExprEq eeq ) {
    	var res = ""
    	
    	if( eeq.exprSimp1 != null && eeq.exprSimp2 != null ) {
    		res = (eeq.exprSimp1 as ExprSimple).prettyPrint + "?=" + eeq.exprSimp2.prettyPrint
    	} else if ( eeq.expr != null ) {
    		res = "("
    			res+= eeq.expr.prettyPrint
    		res += ")"
    	}
    	
    	return res
    }
    
    def prettyPrint( Cons c ) {
    	var res = "(cons "
    	
    	res += c.list.prettyPrint
    	
    	return res + ")"
    }
    
    def prettyPrint( ListExpr le ) {
		var res = ""
		
		for ( i: 0..le.exprs.size()-1 ) {
			res += le.exprs.get( i ).prettyPrint()
			if( i < le.exprs.size()-1 ) {
				res+= " "
			}
		}
		
		return res
    }
    
    def prettyPrint( Vars v ) {
    	return v.vars.printWithDelimiter( ", " )
    }
    
    def prettyPrint( Affect a ){
    	return a.vars.prettyPrint + ' := ' +  a.exp.prettyPrint;
    }
    
    def buildString( int indent , String add) {
    	var res = ""
    	for( i: 0 ..< indent ) {
    		res+=add
    	}
    	return res
    }	
    
    def prettyPrint( While whileC, int globalindent) {
     	var indent = this.indentMap.get("while");
    	var globalIndentStr = buildString(globalindent, " ");
    	
    	var res = "while " + whileC.expr.prettyPrint + "\n" + globalIndentStr + "do\n";
    	
    	res+= whileC.cmds.prettyPrint( globalindent + indent );
    	    	
    	return res + "\n" + globalIndentStr + "od" ;
    }
    def prettyPrint( For forC, int globalindent) {
     	var indent = this.indentMap.get("for");
    	var globalIndentStr = buildString(globalindent, " ");
    	var res = "for " + forC.expr.prettyPrint + "\n" + globalIndentStr + "do\n";
    	
    	res+= forC.cmds.prettyPrint( globalindent + indent );
    	    	
    	return res + "\n" + globalIndentStr + "od" ;
    }
    
    def prettyPrint( Foreach forE, int globalindent ) {
     	var indent = this.indentMap.get("foreach");
    	var globalIndentStr = buildString(globalindent, " ");
    	var res = "foreach " + forE.expr1.prettyPrint +" in " + forE.expr2.prettyPrint + "\n" + globalIndentStr + "do\n";
    	
    	res+= forE.cmds.prettyPrint( globalindent + indent );
    	    	
    	return res + "\n" + globalIndentStr + "od" ;
    }
    
    def prettyPrint( If ifC, int globalindent) {
    	var indent = this.indentMap.get("if");
    	var globalIndentStr = buildString(globalindent, " ");
    	var res = "if " + ifC.expr.prettyPrint + "\n" + globalIndentStr + "then\n";
    	
    	res+= ifC.cmdsTrue.prettyPrint( globalindent + indent );
    	
    	if( ifC.cmdsFalse != null ) {
    		res+= "\n" + globalIndentStr +"else\n"
    		res+= ifC.cmdsFalse.prettyPrint( globalindent + indent );
    	}
    	
    	return res + "\n" + globalIndentStr + "fi" ;
    }
    
    def prettyPrint( Command c , int globalindent )  {
    	var res = "";
    	if( c.cmd instanceof Nop ) {
    		res += (c.cmd as Nop).prettyPrint
    	}else if( c.cmd instanceof Affect ) {
    		res+= (c.cmd as Affect).prettyPrint
    	} else if( c.cmd instanceof If ) {
    		res+= (c.cmd as If).prettyPrint( globalindent )
    	} else if( c.cmd instanceof For ) {
    		res+= (c.cmd as For).prettyPrint( globalindent )
    	} else if( c.cmd instanceof While ) {
    		res+= (c.cmd as While).prettyPrint( globalindent )
    	} else if( c.cmd instanceof Foreach ) {
    		res+= (c.cmd as Foreach).prettyPrint( globalindent )
    	} 

    	return res
    }
    
    def prettyPrint( Commands cmds, int globalindent ) {
    	var res = ""
    	val globalIndentStr = buildString( globalindent, " " );
		for ( i: 0..cmds.commands.size() - 1 ) {
			if( i < cmds.commands.size -1) {
				res += globalIndentStr + cmds.commands.get( i ).prettyPrint( globalindent ) + " ;\n" 
			}else {			
				res+= globalIndentStr + cmds.commands.get( i ).prettyPrint( globalindent )
			}		
		}
    	
    	return res
    }

//	def prettyPrint( ExprAnd exprAnd ) {
//		for( 0..exprAnd.exprs.size-1 ) {
//			
//		}
//	}
}
