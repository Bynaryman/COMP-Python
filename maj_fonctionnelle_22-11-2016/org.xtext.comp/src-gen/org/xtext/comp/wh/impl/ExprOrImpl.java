/**
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.wh.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.comp.wh.ExprNot;
import org.xtext.comp.wh.ExprOr;
import org.xtext.comp.wh.WhPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Or</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.comp.wh.impl.ExprOrImpl#getExprNot1 <em>Expr Not1</em>}</li>
 *   <li>{@link org.xtext.comp.wh.impl.ExprOrImpl#getExprNotX <em>Expr Not X</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprOrImpl extends MinimalEObjectImpl.Container implements ExprOr
{
  /**
   * The cached value of the '{@link #getExprNot1() <em>Expr Not1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprNot1()
   * @generated
   * @ordered
   */
  protected ExprNot exprNot1;

  /**
   * The cached value of the '{@link #getExprNotX() <em>Expr Not X</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprNotX()
   * @generated
   * @ordered
   */
  protected EList<ExprNot> exprNotX;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprOrImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhPackage.Literals.EXPR_OR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprNot getExprNot1()
  {
    return exprNot1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprNot1(ExprNot newExprNot1, NotificationChain msgs)
  {
    ExprNot oldExprNot1 = exprNot1;
    exprNot1 = newExprNot1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_OR__EXPR_NOT1, oldExprNot1, newExprNot1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprNot1(ExprNot newExprNot1)
  {
    if (newExprNot1 != exprNot1)
    {
      NotificationChain msgs = null;
      if (exprNot1 != null)
        msgs = ((InternalEObject)exprNot1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_OR__EXPR_NOT1, null, msgs);
      if (newExprNot1 != null)
        msgs = ((InternalEObject)newExprNot1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhPackage.EXPR_OR__EXPR_NOT1, null, msgs);
      msgs = basicSetExprNot1(newExprNot1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhPackage.EXPR_OR__EXPR_NOT1, newExprNot1, newExprNot1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExprNot> getExprNotX()
  {
    if (exprNotX == null)
    {
      exprNotX = new EObjectContainmentEList<ExprNot>(ExprNot.class, this, WhPackage.EXPR_OR__EXPR_NOT_X);
    }
    return exprNotX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_OR__EXPR_NOT1:
        return basicSetExprNot1(null, msgs);
      case WhPackage.EXPR_OR__EXPR_NOT_X:
        return ((InternalEList<?>)getExprNotX()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_OR__EXPR_NOT1:
        return getExprNot1();
      case WhPackage.EXPR_OR__EXPR_NOT_X:
        return getExprNotX();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_OR__EXPR_NOT1:
        setExprNot1((ExprNot)newValue);
        return;
      case WhPackage.EXPR_OR__EXPR_NOT_X:
        getExprNotX().clear();
        getExprNotX().addAll((Collection<? extends ExprNot>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_OR__EXPR_NOT1:
        setExprNot1((ExprNot)null);
        return;
      case WhPackage.EXPR_OR__EXPR_NOT_X:
        getExprNotX().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhPackage.EXPR_OR__EXPR_NOT1:
        return exprNot1 != null;
      case WhPackage.EXPR_OR__EXPR_NOT_X:
        return exprNotX != null && !exprNotX.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExprOrImpl
