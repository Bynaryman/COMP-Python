/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WhElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Wh");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsProgramParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Wh:
		//	elements+=Program*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Program*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Program
		public RuleCall getElementsProgramParserRuleCall_0() { return cElementsProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSYMBOLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Program:
		//	'function' name=SYMBOL ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=SYMBOL ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=SYMBOL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SYMBOL
		public RuleCall getNameSYMBOLTerminalRuleCall_1_0() { return cNameSYMBOLTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputInputParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandCommandsParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWriteKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputOutputParserRuleCall_6_0 = (RuleCall)cOutputAssignment_6.eContents().get(0);
		
		//Definition:
		//	'read' input=Input '%' command=Commands '%' 'write' output=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' input=Input '%' command=Commands '%' 'write' output=Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//input=Input
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_1_0() { return cInputInputParserRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//command=Commands
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }
		
		//Commands
		public RuleCall getCommandCommandsParserRuleCall_3_0() { return cCommandCommandsParserRuleCall_3_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//'write'
		public Keyword getWriteKeyword_5() { return cWriteKeyword_5; }
		
		//output=Output
		public Assignment getOutputAssignment_6() { return cOutputAssignment_6; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_6_0() { return cOutputOutputParserRuleCall_6_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVARIABLETerminalRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Input:
		//	vars+=VARIABLE (',' vars+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=VARIABLE (',' vars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_0_0() { return cVarsVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_1_1_0() { return cVarsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVARIABLETerminalRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Output:
		//	vars+=VARIABLE (',' vars+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=VARIABLE (',' vars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_0_0() { return cVarsVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_1_1_0() { return cVarsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_0_0 = (RuleCall)cCommandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_1_1_0 = (RuleCall)cCommandsAssignment_1_1.eContents().get(0);
		
		//Commands:
		//	commands+=Command (';' commands+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command (';' commands+=Command)*
		public Group getGroup() { return cGroup; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_0() { return cCommandsAssignment_0; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0_0() { return cCommandsCommandParserRuleCall_0_0; }
		
		//(';' commands+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_1_1() { return cCommandsAssignment_1_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_1_0() { return cCommandsCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Command");
		private final Assignment cCmdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCmdAlternatives_0 = (Alternatives)cCmdAssignment.eContents().get(0);
		private final RuleCall cCmdNopParserRuleCall_0_0 = (RuleCall)cCmdAlternatives_0.eContents().get(0);
		private final RuleCall cCmdAffectParserRuleCall_0_1 = (RuleCall)cCmdAlternatives_0.eContents().get(1);
		
		//Command:
		//	cmd=(Nop | Affect);
		@Override public ParserRule getRule() { return rule; }
		
		//cmd=(Nop | Affect)
		public Assignment getCmdAssignment() { return cCmdAssignment; }
		
		//(Nop | Affect)
		public Alternatives getCmdAlternatives_0() { return cCmdAlternatives_0; }
		
		//Nop
		public RuleCall getCmdNopParserRuleCall_0_0() { return cCmdNopParserRuleCall_0_0; }
		
		//Affect
		public RuleCall getCmdAffectParserRuleCall_0_1() { return cCmdAffectParserRuleCall_0_1; }
	}
	public class NopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Nop");
		private final Assignment cNopAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNopNopKeyword_0 = (Keyword)cNopAssignment.eContents().get(0);
		
		//Nop:
		//	nop='nop';
		@Override public ParserRule getRule() { return rule; }
		
		//nop='nop'
		public Assignment getNopAssignment() { return cNopAssignment; }
		
		//'nop'
		public Keyword getNopNopKeyword_0() { return cNopNopKeyword_0; }
	}
	public class AffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Affect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExprsParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Affect:
		//	vars=Vars ':=' exp=Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//vars=Vars ':=' exp=Exprs
		public Group getGroup() { return cGroup; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_0() { return cVarsVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exp=Exprs
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exprs
		public RuleCall getExpExprsParserRuleCall_2_0() { return cExpExprsParserRuleCall_2_0; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVARIABLETerminalRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Vars:
		//	vars+=VARIABLE (',' vars+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=VARIABLE (',' vars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_0_0() { return cVarsVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_1_1_0() { return cVarsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprsExprParserRuleCall_0_0 = (RuleCall)cExprsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_1_1_0 = (RuleCall)cExprsAssignment_1_1.eContents().get(0);
		
		//Exprs:
		//	exprs+=Expr (',' exprs+=Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exprs+=Expr (',' exprs+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//exprs+=Expr
		public Assignment getExprsAssignment_0() { return cExprsAssignment_0; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_0_0() { return cExprsExprParserRuleCall_0_0; }
		
		//(',' exprs+=Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exprs+=Expr
		public Assignment getExprsAssignment_1_1() { return cExprsAssignment_1_1; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_1_1_0() { return cExprsExprParserRuleCall_1_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprExprAndParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprExprSimpleParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//Expr:
		//	=> expr=ExprAnd | expr=ExprSimple;
		@Override public ParserRule getRule() { return rule; }
		
		//=> expr=ExprAnd | expr=ExprSimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> expr=ExprAnd
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//ExprAnd
		public RuleCall getExprExprAndParserRuleCall_0_0() { return cExprExprAndParserRuleCall_0_0; }
		
		//expr=ExprSimple
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ExprSimple
		public RuleCall getExprExprSimpleParserRuleCall_1_0() { return cExprExprSimpleParserRuleCall_1_0; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cStrNilKeyword_0_0 = (Keyword)cStrAssignment_0.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStrVARIABLETerminalRuleCall_1_0 = (RuleCall)cStrAssignment_1.eContents().get(0);
		private final Assignment cStrAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStrSYMBOLTerminalRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Assignment cConsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cConsConsParserRuleCall_3_0 = (RuleCall)cConsAssignment_3.eContents().get(0);
		
		//ExprSimple:
		//	str='nil' | str=VARIABLE | str=SYMBOL | cons=Cons;
		@Override public ParserRule getRule() { return rule; }
		
		//str='nil' | str=VARIABLE | str=SYMBOL | cons=Cons
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//str='nil'
		public Assignment getStrAssignment_0() { return cStrAssignment_0; }
		
		//'nil'
		public Keyword getStrNilKeyword_0_0() { return cStrNilKeyword_0_0; }
		
		//str=VARIABLE
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }
		
		//VARIABLE
		public RuleCall getStrVARIABLETerminalRuleCall_1_0() { return cStrVARIABLETerminalRuleCall_1_0; }
		
		//str=SYMBOL
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }
		
		//SYMBOL
		public RuleCall getStrSYMBOLTerminalRuleCall_2_0() { return cStrSYMBOLTerminalRuleCall_2_0; }
		
		//cons=Cons
		public Assignment getConsAssignment_3() { return cConsAssignment_3; }
		
		//Cons
		public RuleCall getConsConsParserRuleCall_3_0() { return cConsConsParserRuleCall_3_0; }
	}
	public class ConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.Cons");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListListExprParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cons:
		//	'(' 'cons' list=ListExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'cons' list=ListExpr ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'cons'
		public Keyword getConsKeyword_1() { return cConsKeyword_1; }
		
		//list=ListExpr
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//ListExpr
		public RuleCall getListListExprParserRuleCall_2_0() { return cListListExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ListExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.ListExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprsExprParserRuleCall_0_0 = (RuleCall)cExprsAssignment_0.eContents().get(0);
		private final Assignment cExprsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_1_0 = (RuleCall)cExprsAssignment_1.eContents().get(0);
		
		//ListExpr:
		//	exprs+=Expr exprs+=Expr*;
		@Override public ParserRule getRule() { return rule; }
		
		//exprs+=Expr exprs+=Expr*
		public Group getGroup() { return cGroup; }
		
		//exprs+=Expr
		public Assignment getExprsAssignment_0() { return cExprsAssignment_0; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_0_0() { return cExprsExprParserRuleCall_0_0; }
		
		//exprs+=Expr*
		public Assignment getExprsAssignment_1() { return cExprsAssignment_1; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_1_0() { return cExprsExprParserRuleCall_1_0; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprOr1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprOr1ExprOrParserRuleCall_0_0 = (RuleCall)cExprOr1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprOrXAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprOrXExprOrParserRuleCall_1_1_0 = (RuleCall)cExprOrXAssignment_1_1.eContents().get(0);
		
		//ExprAnd:
		//	exprOr1=ExprOr ('and' exprOrX+=ExprOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exprOr1=ExprOr ('and' exprOrX+=ExprOr)*
		public Group getGroup() { return cGroup; }
		
		//exprOr1=ExprOr
		public Assignment getExprOr1Assignment_0() { return cExprOr1Assignment_0; }
		
		//ExprOr
		public RuleCall getExprOr1ExprOrParserRuleCall_0_0() { return cExprOr1ExprOrParserRuleCall_0_0; }
		
		//('and' exprOrX+=ExprOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//exprOrX+=ExprOr
		public Assignment getExprOrXAssignment_1_1() { return cExprOrXAssignment_1_1; }
		
		//ExprOr
		public RuleCall getExprOrXExprOrParserRuleCall_1_1_0() { return cExprOrXExprOrParserRuleCall_1_1_0; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprNot1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprNot1ExprNotParserRuleCall_0_0 = (RuleCall)cExprNot1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprNotXAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprNotXExprNotParserRuleCall_1_1_0 = (RuleCall)cExprNotXAssignment_1_1.eContents().get(0);
		
		//ExprOr:
		//	exprNot1=ExprNot ('or' exprNotX+=ExprNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exprNot1=ExprNot ('or' exprNotX+=ExprNot)*
		public Group getGroup() { return cGroup; }
		
		//exprNot1=ExprNot
		public Assignment getExprNot1Assignment_0() { return cExprNot1Assignment_0; }
		
		//ExprNot
		public RuleCall getExprNot1ExprNotParserRuleCall_0_0() { return cExprNot1ExprNotParserRuleCall_0_0; }
		
		//('or' exprNotX+=ExprNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//exprNotX+=ExprNot
		public Assignment getExprNotXAssignment_1_1() { return cExprNotXAssignment_1_1; }
		
		//ExprNot
		public RuleCall getExprNotXExprNotParserRuleCall_1_1_0() { return cExprNotXExprNotParserRuleCall_1_1_0; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.ExprNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotNotKeyword_0_0 = (Keyword)cNotAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprEqParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ExprNot:
		//	not='not'? expr=ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//not='not'? expr=ExprEq
		public Group getGroup() { return cGroup; }
		
		//not='not'?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }
		
		//'not'
		public Keyword getNotNotKeyword_0_0() { return cNotNotKeyword_0_0; }
		
		//expr=ExprEq
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//ExprEq
		public RuleCall getExprExprEqParserRuleCall_1_0() { return cExprExprEqParserRuleCall_1_0; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExprSimp1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExprSimp1ExprSimpleParserRuleCall_0_0_0 = (RuleCall)cExprSimp1Assignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprSimp2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprSimp2ExprSimpleParserRuleCall_0_2_0 = (RuleCall)cExprSimp2Assignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ExprEq:
		//	exprSimp1=ExprSimple '=?' exprSimp2=ExprSimple | '(' expr=Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//exprSimp1=ExprSimple '=?' exprSimp2=ExprSimple | '(' expr=Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exprSimp1=ExprSimple '=?' exprSimp2=ExprSimple
		public Group getGroup_0() { return cGroup_0; }
		
		//exprSimp1=ExprSimple
		public Assignment getExprSimp1Assignment_0_0() { return cExprSimp1Assignment_0_0; }
		
		//ExprSimple
		public RuleCall getExprSimp1ExprSimpleParserRuleCall_0_0_0() { return cExprSimp1ExprSimpleParserRuleCall_0_0_0; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }
		
		//exprSimp2=ExprSimple
		public Assignment getExprSimp2Assignment_0_2() { return cExprSimp2Assignment_0_2; }
		
		//ExprSimple
		public RuleCall getExprSimp2ExprSimpleParserRuleCall_0_2_0() { return cExprSimp2ExprSimpleParserRuleCall_0_2_0; }
		
		//'(' expr=Expr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_1_0() { return cExprExprParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final WhElements pWh;
	private final ProgramElements pProgram;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final NopElements pNop;
	private final AffectElements pAffect;
	private final VarsElements pVars;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final ConsElements pCons;
	private final ListExprElements pListExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWh = new WhElements();
		this.pProgram = new ProgramElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pNop = new NopElements();
		this.pAffect = new AffectElements();
		this.pVars = new VarsElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pCons = new ConsElements();
		this.pListExpr = new ListExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.VARIABLE");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.comp.Wh.SYMBOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.comp.Wh".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Wh:
	//	elements+=Program*;
	public WhElements getWhAccess() {
		return pWh;
	}
	
	public ParserRule getWhRule() {
		return getWhAccess().getRule();
	}
	
	//Program:
	//	'function' name=SYMBOL ':' definition=Definition;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Definition:
	//	'read' input=Input '%' command=Commands '%' 'write' output=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	vars+=VARIABLE (',' vars+=VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	vars+=VARIABLE (',' vars+=VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Commands:
	//	commands+=Command (';' commands+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	cmd=(Nop | Affect);
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Nop:
	//	nop='nop';
	public NopElements getNopAccess() {
		return pNop;
	}
	
	public ParserRule getNopRule() {
		return getNopAccess().getRule();
	}
	
	//Affect:
	//	vars=Vars ':=' exp=Exprs;
	public AffectElements getAffectAccess() {
		return pAffect;
	}
	
	public ParserRule getAffectRule() {
		return getAffectAccess().getRule();
	}
	
	//Vars:
	//	vars+=VARIABLE (',' vars+=VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Exprs:
	//	exprs+=Expr (',' exprs+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expr:
	//	=> expr=ExprAnd | expr=ExprSimple;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprSimple:
	//	str='nil' | str=VARIABLE | str=SYMBOL | cons=Cons;
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//Cons:
	//	'(' 'cons' list=ListExpr ')';
	public ConsElements getConsAccess() {
		return pCons;
	}
	
	public ParserRule getConsRule() {
		return getConsAccess().getRule();
	}
	
	//ListExpr:
	//	exprs+=Expr exprs+=Expr*;
	public ListExprElements getListExprAccess() {
		return pListExpr;
	}
	
	public ParserRule getListExprRule() {
		return getListExprAccess().getRule();
	}
	
	//ExprAnd:
	//	exprOr1=ExprOr ('and' exprOrX+=ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//ExprOr:
	//	exprNot1=ExprNot ('or' exprNotX+=ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//ExprNot:
	//	not='not'? expr=ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//ExprEq:
	//	exprSimp1=ExprSimple '=?' exprSimp2=ExprSimple | '(' expr=Expr ')';
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//terminal VARIABLE:
	//	'A'..'Z' ('0'..'9' | 'a'..'z' | 'A'..'Z')* ((('-' | '+' | '.' | '/' | '_' | '&') | '->') ('0'..'9' | 'a'..'z' |
	//	'A'..'Z')+)* ('?' | '!')?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('0'..'9' | 'a'..'z' | 'A'..'Z')* ((('-' | '+' | '.' | '/' | '_' | '&') | '->') ('0'..'9' | 'a'..'z' |
	//	'A'..'Z')+)* ('?' | '!')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
