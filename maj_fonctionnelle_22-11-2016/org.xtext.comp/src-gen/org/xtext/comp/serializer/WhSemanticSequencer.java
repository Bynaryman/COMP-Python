/*
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.comp.services.WhGrammarAccess;
import org.xtext.comp.wh.Affect;
import org.xtext.comp.wh.Command;
import org.xtext.comp.wh.Commands;
import org.xtext.comp.wh.Cons;
import org.xtext.comp.wh.Definition;
import org.xtext.comp.wh.Expr;
import org.xtext.comp.wh.ExprAnd;
import org.xtext.comp.wh.ExprEq;
import org.xtext.comp.wh.ExprNot;
import org.xtext.comp.wh.ExprOr;
import org.xtext.comp.wh.ExprSimple;
import org.xtext.comp.wh.Exprs;
import org.xtext.comp.wh.Input;
import org.xtext.comp.wh.ListExpr;
import org.xtext.comp.wh.Nop;
import org.xtext.comp.wh.Output;
import org.xtext.comp.wh.Program;
import org.xtext.comp.wh.Vars;
import org.xtext.comp.wh.Wh;
import org.xtext.comp.wh.WhPackage;

@SuppressWarnings("all")
public class WhSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WhGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WhPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WhPackage.AFFECT:
				sequence_Affect(context, (Affect) semanticObject); 
				return; 
			case WhPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case WhPackage.COMMANDS:
				sequence_Commands(context, (Commands) semanticObject); 
				return; 
			case WhPackage.CONS:
				sequence_Cons(context, (Cons) semanticObject); 
				return; 
			case WhPackage.DEFINITION:
				sequence_Definition(context, (Definition) semanticObject); 
				return; 
			case WhPackage.EXPR:
				sequence_Expr(context, (Expr) semanticObject); 
				return; 
			case WhPackage.EXPR_AND:
				sequence_ExprAnd(context, (ExprAnd) semanticObject); 
				return; 
			case WhPackage.EXPR_EQ:
				sequence_ExprEq(context, (ExprEq) semanticObject); 
				return; 
			case WhPackage.EXPR_NOT:
				sequence_ExprNot(context, (ExprNot) semanticObject); 
				return; 
			case WhPackage.EXPR_OR:
				sequence_ExprOr(context, (ExprOr) semanticObject); 
				return; 
			case WhPackage.EXPR_SIMPLE:
				sequence_ExprSimple(context, (ExprSimple) semanticObject); 
				return; 
			case WhPackage.EXPRS:
				sequence_Exprs(context, (Exprs) semanticObject); 
				return; 
			case WhPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case WhPackage.LIST_EXPR:
				sequence_ListExpr(context, (ListExpr) semanticObject); 
				return; 
			case WhPackage.NOP:
				sequence_Nop(context, (Nop) semanticObject); 
				return; 
			case WhPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case WhPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case WhPackage.VARS:
				sequence_Vars(context, (Vars) semanticObject); 
				return; 
			case WhPackage.WH:
				sequence_Wh(context, (Wh) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Affect returns Affect
	 *
	 * Constraint:
	 *     (vars=Vars exp=Exprs)
	 */
	protected void sequence_Affect(ISerializationContext context, Affect semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.AFFECT__VARS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.AFFECT__VARS));
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.AFFECT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.AFFECT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAffectAccess().getVarsVarsParserRuleCall_0_0(), semanticObject.getVars());
		feeder.accept(grammarAccess.getAffectAccess().getExpExprsParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (cmd=Nop | cmd=Affect)
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Commands returns Commands
	 *
	 * Constraint:
	 *     (commands+=Command commands+=Command*)
	 */
	protected void sequence_Commands(ISerializationContext context, Commands semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cons returns Cons
	 *
	 * Constraint:
	 *     list=ListExpr
	 */
	protected void sequence_Cons(ISerializationContext context, Cons semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.CONS__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.CONS__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConsAccess().getListListExprParserRuleCall_2_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns Definition
	 *
	 * Constraint:
	 *     (input=Input command=Commands output=Output)
	 */
	protected void sequence_Definition(ISerializationContext context, Definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.DEFINITION__INPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.DEFINITION__INPUT));
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.DEFINITION__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.DEFINITION__COMMAND));
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.DEFINITION__OUTPUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.DEFINITION__OUTPUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefinitionAccess().getInputInputParserRuleCall_1_0(), semanticObject.getInput());
		feeder.accept(grammarAccess.getDefinitionAccess().getCommandCommandsParserRuleCall_3_0(), semanticObject.getCommand());
		feeder.accept(grammarAccess.getDefinitionAccess().getOutputOutputParserRuleCall_6_0(), semanticObject.getOutput());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExprAnd returns ExprAnd
	 *
	 * Constraint:
	 *     (exprOr1=ExprOr exprOrX+=ExprOr*)
	 */
	protected void sequence_ExprAnd(ISerializationContext context, ExprAnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprEq returns ExprEq
	 *
	 * Constraint:
	 *     ((exprSimp1=ExprSimple exprSimp2=ExprSimple) | expr=Expr)
	 */
	protected void sequence_ExprEq(ISerializationContext context, ExprEq semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprNot returns ExprNot
	 *
	 * Constraint:
	 *     (not='not'? expr=ExprEq)
	 */
	protected void sequence_ExprNot(ISerializationContext context, ExprNot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprOr returns ExprOr
	 *
	 * Constraint:
	 *     (exprNot1=ExprNot exprNotX+=ExprNot*)
	 */
	protected void sequence_ExprOr(ISerializationContext context, ExprOr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprSimple returns ExprSimple
	 *
	 * Constraint:
	 *     (str='nil' | str=VARIABLE | str=SYMBOL | cons=Cons)
	 */
	protected void sequence_ExprSimple(ISerializationContext context, ExprSimple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expr returns Expr
	 *
	 * Constraint:
	 *     (expr=ExprAnd | expr=ExprSimple)
	 */
	protected void sequence_Expr(ISerializationContext context, Expr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exprs returns Exprs
	 *
	 * Constraint:
	 *     (exprs+=Expr exprs+=Expr*)
	 */
	protected void sequence_Exprs(ISerializationContext context, Exprs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Input returns Input
	 *
	 * Constraint:
	 *     (vars+=VARIABLE vars+=VARIABLE*)
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListExpr returns ListExpr
	 *
	 * Constraint:
	 *     (exprs+=Expr exprs+=Expr*)
	 */
	protected void sequence_ListExpr(ISerializationContext context, ListExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nop returns Nop
	 *
	 * Constraint:
	 *     nop='nop'
	 */
	protected void sequence_Nop(ISerializationContext context, Nop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.NOP__NOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.NOP__NOP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNopAccess().getNopNopKeyword_0(), semanticObject.getNop());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     (vars+=VARIABLE vars+=VARIABLE*)
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (name=SYMBOL definition=Definition)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.PROGRAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.PROGRAM__NAME));
			if (transientValues.isValueTransient(semanticObject, WhPackage.Literals.PROGRAM__DEFINITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WhPackage.Literals.PROGRAM__DEFINITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getNameSYMBOLTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getProgramAccess().getDefinitionDefinitionParserRuleCall_3_0(), semanticObject.getDefinition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vars returns Vars
	 *
	 * Constraint:
	 *     (vars+=VARIABLE vars+=VARIABLE*)
	 */
	protected void sequence_Vars(ISerializationContext context, Vars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Wh returns Wh
	 *
	 * Constraint:
	 *     elements+=Program+
	 */
	protected void sequence_Wh(ISerializationContext context, Wh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
