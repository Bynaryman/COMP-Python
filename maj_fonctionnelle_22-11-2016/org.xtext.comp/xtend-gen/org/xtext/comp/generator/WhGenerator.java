/**
 * generated by Xtext 2.10.0
 */
package org.xtext.comp.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.comp.wh.Affect;
import org.xtext.comp.wh.Command;
import org.xtext.comp.wh.Commands;
import org.xtext.comp.wh.Cons;
import org.xtext.comp.wh.Definition;
import org.xtext.comp.wh.Expr;
import org.xtext.comp.wh.ExprAnd;
import org.xtext.comp.wh.ExprEq;
import org.xtext.comp.wh.ExprNot;
import org.xtext.comp.wh.ExprOr;
import org.xtext.comp.wh.ExprSimple;
import org.xtext.comp.wh.Exprs;
import org.xtext.comp.wh.Input;
import org.xtext.comp.wh.ListExpr;
import org.xtext.comp.wh.Nop;
import org.xtext.comp.wh.Output;
import org.xtext.comp.wh.Program;
import org.xtext.comp.wh.Vars;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WhGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context, final String output, final int indentAll, final int indentIf) {
    String res = "";
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program prog : _filter) {
      String _res = res;
      CharSequence _prettyPrint = this.prettyPrint(prog);
      String _plus = (_prettyPrint + "\n");
      res = (_res + _plus);
    }
    fsa.generateFile(output, res);
  }
  
  public CharSequence prettyPrint(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("function ");
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append(" :");
    _builder.newLineIfNotEmpty();
    Definition _definition = p.getDefinition();
    CharSequence _prettyPrint = this.prettyPrint(_definition);
    _builder.append(_prettyPrint, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String printWithDelimiter(final List<String> list, final String delimiter) {
    String res = "";
    int _size = list.size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      int _size_1 = list.size();
      int _minus = (_size_1 - 2);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for (final Integer i : _upTo) {
        String _res = res;
        String _get = list.get((i).intValue());
        String _plus = (_get + delimiter);
        res = (_res + _plus);
      }
    }
    int _size_2 = list.size();
    int _minus_1 = (_size_2 - 1);
    String _get_1 = list.get(_minus_1);
    return (res + _get_1);
  }
  
  public String prettyPrint(final Input i) {
    EList<String> _vars = i.getVars();
    return this.printWithDelimiter(_vars, ",");
  }
  
  public String prettyPrint(final Output o) {
    EList<String> _vars = o.getVars();
    return this.printWithDelimiter(_vars, ",");
  }
  
  public CharSequence prettyPrint(final Definition d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("read ");
    Input _input = d.getInput();
    String _prettyPrint = this.prettyPrint(_input);
    _builder.append(_prettyPrint, "");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("\t");
    Commands _command = d.getCommand();
    String _prettyPrint_1 = this.prettyPrint(_command);
    _builder.append(_prettyPrint_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("%");
    _builder.newLine();
    _builder.append("write ");
    Output _output = d.getOutput();
    String _prettyPrint_2 = this.prettyPrint(_output);
    _builder.append(_prettyPrint_2, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence prettyPrint(final Nop n) {
    StringConcatenation _builder = new StringConcatenation();
    String _nop = n.getNop();
    _builder.append(_nop, "");
    return _builder;
  }
  
  public String prettyPrint(final Exprs e) {
    String res = "";
    EList<Expr> _exprs = e.getExprs();
    int _size = _exprs.size();
    int _minus = (_size - 1);
    IntegerRange _upTo = new IntegerRange(0, _minus);
    for (final Integer i : _upTo) {
      {
        String _res = res;
        EList<Expr> _exprs_1 = e.getExprs();
        Expr _get = _exprs_1.get((i).intValue());
        String _prettyPrint = this.prettyPrint(_get);
        res = (_res + _prettyPrint);
        EList<Expr> _exprs_2 = e.getExprs();
        int _size_1 = _exprs_2.size();
        int _minus_1 = (_size_1 - 1);
        boolean _lessThan = ((i).intValue() < _minus_1);
        if (_lessThan) {
          String _res_1 = res;
          res = (_res_1 + ",");
        }
      }
    }
    return res;
  }
  
  public String prettyPrint(final ExprSimple exprSim) {
    String res = "";
    Cons _cons = exprSim.getCons();
    boolean _notEquals = (!Objects.equal(_cons, null));
    if (_notEquals) {
      String _res = res;
      Cons _cons_1 = exprSim.getCons();
      String _prettyPrint = this.prettyPrint(_cons_1);
      res = (_res + _prettyPrint);
    } else {
      String _res_1 = res;
      String _str = exprSim.getStr();
      res = (_res_1 + _str);
    }
    return res;
  }
  
  public String prettyPrint(final Expr e) {
    String res = "";
    EObject _expr = e.getExpr();
    if ((_expr instanceof ExprSimple)) {
      String _res = res;
      EObject _expr_1 = e.getExpr();
      String _prettyPrint = this.prettyPrint(((ExprSimple) _expr_1));
      res = (_res + _prettyPrint);
    } else {
      if ((e instanceof ExprAnd)) {
      } else {
        String _res_1 = res;
        EObject _expr_2 = e.getExpr();
        String _prettyPrint_1 = this.prettyPrint(((ExprAnd) _expr_2));
        res = (_res_1 + _prettyPrint_1);
      }
    }
    return res;
  }
  
  public String prettyPrint(final ExprAnd exprAnd) {
    ExprOr _exprOr1 = exprAnd.getExprOr1();
    String res = this.prettyPrint(_exprOr1);
    EList<ExprOr> _exprOrX = exprAnd.getExprOrX();
    for (final ExprOr e : _exprOrX) {
      String _res = res;
      String _prettyPrint = this.prettyPrint(e);
      String _plus = (" and " + _prettyPrint);
      res = (_res + _plus);
    }
    return res;
  }
  
  public String prettyPrint(final ExprOr exprOr) {
    ExprNot _exprNot1 = exprOr.getExprNot1();
    String res = this.prettyPrint(_exprNot1);
    EList<ExprNot> _exprNotX = exprOr.getExprNotX();
    for (final ExprNot e : _exprNotX) {
      String _res = res;
      String _prettyPrint = this.prettyPrint(e);
      String _plus = (" or " + _prettyPrint);
      res = (_res + _plus);
    }
    return res;
  }
  
  public String prettyPrint(final ExprNot exprnot) {
    String res = "";
    String _not = exprnot.getNot();
    boolean _notEquals = (!Objects.equal(_not, null));
    if (_notEquals) {
      String _res = res;
      res = (_res + "not");
    }
    ExprEq _expr = exprnot.getExpr();
    String _prettyPrint = this.prettyPrint(_expr);
    return (res + _prettyPrint);
  }
  
  public String prettyPrint(final ExprEq eeq) {
    String res = "";
    if (((!Objects.equal(eeq.getExprSimp1(), null)) && (!Objects.equal(eeq.getExprSimp2(), null)))) {
      ExprSimple _exprSimp1 = eeq.getExprSimp1();
      String _prettyPrint = this.prettyPrint(((ExprSimple) _exprSimp1));
      String _plus = (_prettyPrint + "?=");
      ExprSimple _exprSimp2 = eeq.getExprSimp2();
      String _prettyPrint_1 = this.prettyPrint(_exprSimp2);
      String _plus_1 = (_plus + _prettyPrint_1);
      res = _plus_1;
    } else {
      Expr _expr = eeq.getExpr();
      boolean _notEquals = (!Objects.equal(_expr, null));
      if (_notEquals) {
        res = " (";
        String _res = res;
        Expr _expr_1 = eeq.getExpr();
        Object _prettyPrint_2 = this.prettyPrint(_expr_1);
        res = (_res + _prettyPrint_2);
        String _res_1 = res;
        res = (_res_1 + ")");
      }
    }
    return res;
  }
  
  public String prettyPrint(final Cons c) {
    String res = "(cons ";
    String _res = res;
    ListExpr _list = c.getList();
    String _prettyPrint = this.prettyPrint(_list);
    res = (_res + _prettyPrint);
    return (res + ")");
  }
  
  public String prettyPrint(final ListExpr le) {
    String res = "";
    EList<Expr> _exprs = le.getExprs();
    int _size = _exprs.size();
    int _minus = (_size - 1);
    IntegerRange _upTo = new IntegerRange(0, _minus);
    for (final Integer i : _upTo) {
      {
        String _res = res;
        EList<Expr> _exprs_1 = le.getExprs();
        Expr _get = _exprs_1.get((i).intValue());
        Object _prettyPrint = this.prettyPrint(_get);
        res = (_res + _prettyPrint);
        EList<Expr> _exprs_2 = le.getExprs();
        int _size_1 = _exprs_2.size();
        int _minus_1 = (_size_1 - 1);
        boolean _lessThan = ((i).intValue() < _minus_1);
        if (_lessThan) {
          String _res_1 = res;
          res = (_res_1 + " ");
        }
      }
    }
    return res;
  }
  
  public String prettyPrint(final Vars v) {
    EList<String> _vars = v.getVars();
    return this.printWithDelimiter(_vars, ",");
  }
  
  public String prettyPrint(final Affect a) {
    Vars _vars = a.getVars();
    String _prettyPrint = this.prettyPrint(_vars);
    String _plus = (_prettyPrint + " := ");
    Exprs _exp = a.getExp();
    String _prettyPrint_1 = this.prettyPrint(_exp);
    return (_plus + _prettyPrint_1);
  }
  
  public String prettyPrint(final Command c) {
    String res = "";
    EObject _cmd = c.getCmd();
    if ((_cmd instanceof Nop)) {
      String _res = res;
      EObject _cmd_1 = c.getCmd();
      CharSequence _prettyPrint = this.prettyPrint(((Nop) _cmd_1));
      res = (_res + _prettyPrint);
    } else {
      EObject _cmd_2 = c.getCmd();
      if ((_cmd_2 instanceof Affect)) {
        String _res_1 = res;
        EObject _cmd_3 = c.getCmd();
        String _prettyPrint_1 = this.prettyPrint(((Affect) _cmd_3));
        res = (_res_1 + _prettyPrint_1);
      }
    }
    return res;
  }
  
  public String prettyPrint(final Commands cmds) {
    String res = "";
    EList<Command> _commands = cmds.getCommands();
    int _size = _commands.size();
    int _minus = (_size - 1);
    IntegerRange _upTo = new IntegerRange(0, _minus);
    for (final Integer i : _upTo) {
      EList<Command> _commands_1 = cmds.getCommands();
      int _size_1 = _commands_1.size();
      int _minus_1 = (_size_1 - 1);
      boolean _lessThan = ((i).intValue() < _minus_1);
      if (_lessThan) {
        String _res = res;
        EList<Command> _commands_2 = cmds.getCommands();
        Command _get = _commands_2.get((i).intValue());
        String _prettyPrint = this.prettyPrint(_get);
        String _plus = (_prettyPrint + " ;\n");
        res = (_res + _plus);
      } else {
        String _res_1 = res;
        EList<Command> _commands_3 = cmds.getCommands();
        Command _get_1 = _commands_3.get((i).intValue());
        String _prettyPrint_1 = this.prettyPrint(_get_1);
        res = (_res_1 + _prettyPrint_1);
      }
    }
    return res;
  }
}
